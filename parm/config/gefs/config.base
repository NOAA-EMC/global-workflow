#! /usr/bin/env bash

########## config.base ##########
# Common to all steps

echo "BEGIN: config.base"

# Machine environment
export machine="@MACHINE@"

# EMC parallel or NCO production
export RUN_ENVIR="emc"

# Account, queue, etc.
export ACCOUNT="@ACCOUNT@"
export QUEUE="@QUEUE@"
export QUEUE_SERVICE="@QUEUE_SERVICE@"
export PARTITION_BATCH="@PARTITION_BATCH@"
export PARTITION_SERVICE="@PARTITION_SERVICE@"

# Project to use in mass store:
export HPSS_PROJECT="@HPSS_PROJECT@"

# Directories relative to installation areas:
export HOMEgfs=@HOMEgfs@
export EXECgfs=${HOMEgfs}/exec
export FIXgfs=${HOMEgfs}/fix
export PARMgfs=${HOMEgfs}/parm
export SCRgfs=${HOMEgfs}/scripts
export USHgfs=${HOMEgfs}/ush

########################################################################

# GLOBAL static environment parameters
export PACKAGEROOT="@PACKAGEROOT@"    # TODO: set via prod_envir in Ops
export COMROOT="@COMROOT@"    # TODO: set via prod_envir in Ops
export COMINsyn="@COMINsyn@"
export BASE_CPLIC="@BASE_CPLIC@"

# USER specific paths
export HOMEDIR="@HOMEDIR@"
export STMP="@STMP@"
export PTMP="@PTMP@"
export NOSCRUB="@NOSCRUB@"

# Base directories for various builds
export BASE_GIT="@BASE_GIT@"

# Toggle to turn on/off GFS downstream processing.
export DO_BUFRSND="NO"     # BUFR sounding products
export DO_GEMPAK="NO"      # GEMPAK products
export DO_AWIPS="NO"       # AWIPS products

# NO for retrospective parallel; YES for real-time parallel
#  arch.sh uses REALTIME for MOS.  Need to set REALTIME=YES
#  if want MOS written to HPSS.   Should update arch.sh to
#  use RUNMOS flag
export REALTIME="YES"

# Experiment mode (cycled or forecast-only)
export MODE="@MODE@" # cycled/forecast-only

####################################################
# DO NOT ADD MACHINE DEPENDENT STUFF BELOW THIS LINE
# IF YOU HAVE TO MAKE MACHINE SPECIFIC CHANGES BELOW
# FEEL FREE TO MOVE THEM ABOVE THIS LINE TO KEEP IT
# CLEAR
####################################################
# Build paths relative to $HOMEgfs
export HOMEpost="${HOMEgfs}"

# CONVENIENT utility scripts and other environment parameters
export NCP="/bin/cp -p"
export NMV="/bin/mv"
export NLN="/bin/ln -sf"
export VERBOSE="YES"
export KEEPDATA="NO"
export DEBUG_POSTSCRIPT="NO" # PBS only; sets debug=true
export CHGRP_RSTPROD="@CHGRP_RSTPROD@"
export CHGRP_CMD="@CHGRP_CMD@"
export NCDUMP="${NETCDF:-${netcdf_c_ROOT:-}}/bin/ncdump"
export NCLEN="${HOMEgfs}/ush/getncdimlen"

# Machine environment, jobs, and other utility scripts
export BASE_ENV="${HOMEgfs}/env"
export BASE_JOB="${HOMEgfs}/jobs/rocoto"

# EXPERIMENT specific environment parameters
export SDATE=@SDATE@
export EDATE=@EDATE@
export EXP_WARM_START="@EXP_WARM_START@"
export assim_freq=6
export PSLOT="@PSLOT@"
export EXPDIR="@EXPDIR@/${PSLOT}"
export ROTDIR="@COMROOT@/${PSLOT}"

export DATAROOT="${STMP}/RUNDIRS/${PSLOT}"  # TODO: set via prod_envir in Ops
export RUNDIR="${DATAROOT}"  # TODO: Should be removed; use DATAROOT instead
export ARCDIR="${NOSCRUB}/archive/${PSLOT}"
export ATARDIR="@ATARDIR@"

# Commonly defined parameters in JJOBS
export envir=${envir:-"prod"}
export NET="gefs"  # NET is defined in the job-card (ecf)
export RUN="gefs"  # RUN is defined in the job-card (ecf); CDUMP is used at EMC as a RUN proxy
# TODO: determine where is RUN actually used in the workflow other than here
# TODO: is it possible to replace all instances of ${CDUMP} to ${RUN} to be
#       consistent w/ EE2?

# Get all the COM path templates
source "${EXPDIR}/config.com"

# shellcheck disable=SC2016
export ERRSCRIPT=${ERRSCRIPT:-'eval [[ $err = 0 ]]'}
export LOGSCRIPT=${LOGSCRIPT:-""}
#export ERRSCRIPT=${ERRSCRIPT:-"err_chk"}
#export LOGSCRIPT=${LOGSCRIPT:-"startmsg"}
export REDOUT="1>"
export REDERR="2>"

export SENDECF=${SENDECF:-"NO"}
export SENDSDM=${SENDSDM:-"NO"}
export SENDDBN_NTC=${SENDDBN_NTC:-"NO"}
export SENDDBN=${SENDDBN:-"NO"}
export DBNROOT=${DBNROOT:-${UTILROOT:-}/fakedbn}

# APP settings
export APP=@APP@

# Defaults:
export DO_ATM="YES"
export DO_COUPLED="NO"
export DO_WAVE="NO"
export DO_OCN="NO"
export DO_ICE="NO"
export DO_AERO="NO"
export WAVE_CDUMP="" # When to include wave suite: gdas, gfs, or both
export DOBNDPNT_WAVE="NO" # The GEFS buoys file does not currently have any boundary points
export FRAC_GRID=".true."

# Set operational resolution
export OPS_RES="C768" # Do not change

# Resolution specific parameters
export LEVS=128
export CASE="@CASECTL@"  # CASE is required in GEFS to determine ocean/ice/wave resolutions
export CASE_ENS="@CASEENS@"
export OCNRES="@OCNRES@"
export ICERES="${OCNRES}"
# These are the currently recommended grid-combinations
case "${CASE}" in
    "C48")
        export waveGRD='glo_500'
        ;;
    "C96" | "C192")
        export waveGRD='glo_200'
        ;;
    "C384")
        export waveGRD='glo_025'
        ;;
    "C768" | "C1152")
           export waveGRD='mx025'
        ;;
    *)
        echo "FATAL ERROR: Unrecognized CASE ${CASE}, ABORT!"
        exit 1
        ;;
esac

case "${APP}" in
  ATM)
    ;;
  ATMA)
    export DO_AERO="YES"
    ;;
  ATMW)
    export DO_COUPLED="YES"
    export DO_WAVE="YES"
    export WAVE_CDUMP="both"
    ;;
  NG-GODAS)
    export DO_ATM="NO"
    export DO_OCN="YES"
    export DO_ICE="YES"
    ;;
  S2S*)
    export DO_COUPLED="YES"
    export DO_OCN="YES"
    export DO_ICE="YES"

    if [[ "${APP}" =~ A$ ]]; then
        export DO_AERO="YES"
    fi

    if [[ "${APP}" =~ ^S2SW ]]; then
        export DO_WAVE="YES"
        export WAVE_CDUMP="both"
        export cplwav2atm=".true."
    fi
    ;;
  *)
    echo "Unrecognized APP: ${1}"
    exit 1
    ;;
esac

# GFS cycle info
export gfs_cyc=@gfs_cyc@ # 0: no GFS cycle, 1: 00Z only, 2: 00Z and 12Z only, 4: all 4 cycles.

# GFS output and frequency
export FHMIN_GFS=0
export FHMIN=${FHMIN_GFS}
export FHMAX_GFS=@FHMAX_GFS@
export FHOUT_GFS=6
export FHMAX_HF_GFS=0
export FHOUT_HF_GFS=1
export FHOUT_OCNICE_GFS=6
if (( gfs_cyc != 0 )); then
    export STEP_GFS=$(( 24 / gfs_cyc ))
else
    export STEP_GFS="0"
fi
export ILPOST=1           # gempak output frequency up to F120

export FHMIN_ENKF=${FHMIN_GFS}
export FHMAX_ENKF=${FHMAX_GFS}
export FHOUT_ENKF=${FHOUT_GFS}

# GFS restart interval in hours
export restart_interval_gfs=12
# NOTE: Do not set this to zero.  Instead set it to $FHMAX_GFS
# TODO: Remove this variable from config.base and reference from config.fcst
# TODO: rework logic in config.wave and push it to parsing_nameslist_WW3.sh where it is actually used

export QUILTING=".true."
export OUTPUT_GRID="gaussian_grid"
export WRITE_DOPOST=".true." # WRITE_DOPOST=true, use inline POST
export WRITE_NSFLIP=".true."

# Override normal post flat files for GEFS
export FLTFILEGFS="${PARMgfs}/post/postxconfig-NT-GEFS.txt"
export FLTFILEGFSF00="${PARMgfs}/post/postxconfig-NT-GEFS-F00.txt"

# Microphysics Options: 99-ZhaoCarr, 8-Thompson; 6-WSM6, 10-MG, 11-GFDL
export imp_physics=8

# Shared parameters
# DA engine
export DO_JEDIATMVAR="NO"
export DO_JEDIATMENS="NO"
export DO_JEDIOCNVAR="NO"
export DO_JEDISNOWDA="NO"
export DO_MERGENSST="NO"

# Hybrid related
export NMEM_ENS=@NMEM_ENS@

# set default member number memdir for control
# this will be overwritten for the perturbed members
export ENSMEM=${ENSMEM:-"000"}
export MEMDIR="mem${ENSMEM}"

# initialize ocean ensemble members with perturbations
#   if true, only occurs for members greater than zero
export OCN_ENS_PERTURB_FILES=false

export DOIAU="NO"  # While we are not doing IAU, we may want to warm start w/ IAU in the future
# Check if cycle is cold starting
if [[ "${EXP_WARM_START}" = ".false." ]]; then
  export IAU_FHROT=0
else
  if [[ "${DOIAU}" = "YES" ]]; then
    export IAU_FHROT=3
  else
    export IAU_FHROT=0
  fi
fi

# turned on nsst in anal and/or fcst steps, and turn off rtgsst
export DONST="YES"
if [[ ${DONST} = "YES" ]]; then export FNTSFA="        "; fi

# The switch to apply SST elevation correction or not
export nst_anl=.true.

# Make the nsstbufr file on the fly or use the GDA version
export MAKE_NSSTBUFR="@MAKE_NSSTBUFR@"

# Make the aircraft prepbufr file on the fly or use the GDA version
export MAKE_ACFTBUFR="@MAKE_ACFTBUFR@"

# Verification options
export DO_METP="NO"         # Run METPLUS jobs - set METPLUS settings in config.metp
export DO_FIT2OBS="NO"      # Run fit to observations package

# Archiving options
export HPSSARCH="@HPSSARCH@"        # save data to HPSS archive
export LOCALARCH="@LOCALARCH@"        # save data to local archive
if [[ ${HPSSARCH} = "YES" ]] && [[ ${LOCALARCH} = "YES" ]]; then
   echo "Both HPSS and local archiving selected.  Please choose one or the other."
   exit 2
fi
export ARCH_CYC=00           # Archive data at this cycle for warm_start capability
export ARCH_WARMICFREQ=4     # Archive frequency in days for warm_start capability
export ARCH_FCSTICFREQ=1     # Archive frequency in days for gdas and gfs forecast-only capability

export DELETE_COM_IN_ARCHIVE_JOB="YES"   # NO=retain ROTDIR.  YES default in arch.sh and earc.sh.

echo "END: config.base"
