#! /usr/bin/env bash

########## config.resources ##########
# Set resource information for job tasks
# e.g. walltime, node, cores per node, memory etc.

if [[ $# -ne 1 ]]; then

    echo "Must specify an input task argument to set resource variables!"
    echo "argument can be any one of the following:"
    echo "coupled_ic aerosol_init"
    echo "sfcanl analcalc analdiag fcst post vrfy fit2obs metp arch echgres"
    echo "ecen esfc efcs epos earc"
    echo "init_chem mom6ic ocnpost"
    echo "waveinit waveprep wavepostsbs wavepostbndpnt wavepostbndpntbll wavepostpnt"
    echo "wavegempak waveawipsbulls waveawipsgridded"
    echo "postsnd awips gempak"
    exit 1

fi

step=$1

echo "BEGIN: config.resources"

if [[ "${machine}" = "WCOSS2" ]]; then
   export npe_node_max=128
elif [[ "${machine}" = "JET" ]]; then
   if [[ ${PARTITION_BATCH} = "xjet" ]]; then
     export npe_node_max=24
   elif [[ ${PARTITION_BATCH} = "vjet" || ${PARTITION_BATCH} = "sjet" ]]; then
     export npe_node_max=16
   elif [[ ${PARTITION_BATCH} = "kjet" ]]; then
     export npe_node_max=40
   fi
elif [[ ${machine} = "HERA" ]]; then
   export npe_node_max=40
elif [[ ${machine} = "S4" ]]; then
   if [[ ${PARTITION_BATCH} = "s4" ]]; then
      export npe_node_max=32
   elif [[ ${PARTITION_BATCH} = "ivy" ]]; then
      export npe_node_max=20
   fi
elif [[ ${machine} = "ORION" ]]; then
   export npe_node_max=40
fi

if [[ ${step} = "prep" ]]; then
    export wtime_prep='00:30:00'
    export npe_prep=4
    export npe_node_prep=2
    export nth_prep=1
    if [[ "${machine}" = "WCOSS2" ]]; then
      export is_exclusive=True
    else
      export memory_prep="40G"
    fi

elif [[ "${step}" = "aerosol_init" ]]; then
    export wtime_aerosol_init="00:05:00"
    export npe_aerosol_init=1
    export nth_aerosol_init=1
    npe_node_aerosol_init=$(echo "${npe_node_max} / ${nth_aerosol_init}" | bc)
    export npe_node_aerosol_init
    export NTASKS=${npe_aerosol_init}
    export memory_aerosol_init="6G"

elif [[ ${step} = "waveinit" ]]; then

    export wtime_waveinit="00:10:00"
    export npe_waveinit=12
    export nth_waveinit=1
    npe_node_waveinit=$(echo "${npe_node_max} / ${nth_waveinit}" | bc)
    export npe_node_waveinit
    export NTASKS=${npe_waveinit}
    export memory_waveinit="2GB"

elif [[ ${step} = "waveprep" ]]; then

    export wtime_waveprep="00:10:00"
    export npe_waveprep=5
    export npe_waveprep_gfs=65
    export nth_waveprep=1
    export nth_waveprep_gfs=1
    npe_node_waveprep=$(echo "${npe_node_max} / ${nth_waveprep}" | bc)
    export npe_node_waveprep
    npe_node_waveprep_gfs=$(echo "${npe_node_max} / ${nth_waveprep_gfs}" | bc)
    export npe_node_waveprep_gfs
    export NTASKS=${npe_waveprep}
    export NTASKS_gfs=${npe_waveprep_gfs}
    export memory_waveprep="100GB"
    export memory_waveprep_gfs="150GB"

elif [[ ${step} = "wavepostsbs" ]]; then

    export wtime_wavepostsbs="00:20:00"
    export wtime_wavepostsbs_gfs="03:00:00"
    export npe_wavepostsbs=8
    export nth_wavepostsbs=1
    npe_node_wavepostsbs=$(echo "${npe_node_max} / ${nth_wavepostsbs}" | bc)
    export npe_node_wavepostsbs
    export NTASKS=${npe_wavepostsbs}
    export memory_wavepostsbs="10GB"
    export memory_wavepostsbs_gfs="10GB"

elif [[ ${step} = "wavepostbndpnt" ]]; then

    export wtime_wavepostbndpnt="01:00:00"
    export npe_wavepostbndpnt=240
    export nth_wavepostbndpnt=1
    npe_node_wavepostbndpnt=$(echo "${npe_node_max} / ${nth_wavepostbndpnt}" | bc)
    export npe_node_wavepostbndpnt
    export NTASKS=${npe_wavepostbndpnt}
    export is_exclusive=True

elif [[ ${step} = "wavepostbndpntbll" ]]; then

    export wtime_wavepostbndpntbll="01:00:00"
    export npe_wavepostbndpntbll=448
    export nth_wavepostbndpntbll=1
    npe_node_wavepostbndpntbll=$(echo "${npe_node_max} / ${nth_wavepostbndpntbll}" | bc)
    export npe_node_wavepostbndpntbll
    export NTASKS=${npe_wavepostbndpntbll}
    export is_exclusive=True

elif [[ ${step} = "wavepostpnt" ]]; then

    export wtime_wavepostpnt="01:30:00"
    export npe_wavepostpnt=200
    export nth_wavepostpnt=1
    npe_node_wavepostpnt=$(echo "${npe_node_max} / ${nth_wavepostpnt}" | bc)
    export npe_node_wavepostpnt
    export NTASKS=${npe_wavepostpnt}
    export is_exclusive=True

elif [[ ${step} = "wavegempak" ]]; then

    export wtime_wavegempak="02:00:00"
    export npe_wavegempak=1
    export nth_wavegempak=1
    npe_node_wavegempak=$(echo "${npe_node_max} / ${nth_wavegempak}" | bc)
    export npe_node_wavegempak
    export NTASKS=${npe_wavegempak}
    export memory_wavegempak="1GB"

elif [[ ${step} = "waveawipsbulls" ]]; then

    export wtime_waveawipsbulls="00:20:00"
    export npe_waveawipsbulls=1
    export nth_waveawipsbulls=1
    npe_node_waveawipsbulls=$(echo "${npe_node_max} / ${nth_waveawipsbulls}" | bc)
    export npe_node_waveawipsbulls
    export NTASKS=${npe_waveawipsbulls}
    export is_exclusive=True

elif [[ ${step} = "waveawipsgridded" ]]; then

    export wtime_waveawipsgridded="02:00:00"
    export npe_waveawipsgridded=1
    export nth_waveawipsgridded=1
    npe_node_waveawipsgridded=$(echo "${npe_node_max} / ${nth_waveawipsgridded}" | bc)
    export npe_node_waveawipsgridded
    export NTASKS=${npe_waveawipsgridded}
    export memory_waveawipsgridded_gfs="1GB"

elif [[ ${step} = "analcalc" ]]; then

    export wtime_analcalc="00:10:00"
    export npe_analcalc=127
    export ntasks="${npe_analcalc}"
    export nth_analcalc=1
    export nth_echgres=4
    export nth_echgres_gfs=12
    npe_node_analcalc=$(echo "${npe_node_max} / ${nth_analcalc}" | bc)
    export npe_node_analcalc
    export is_exclusive=True

elif [[ ${step} = "analdiag" ]]; then

    export wtime_analdiag="00:15:00"
    export npe_analdiag=96             # Should be at least twice npe_ediag
    export nth_analdiag=1
    npe_node_analdiag=$(echo "${npe_node_max} / ${nth_analdiag}" | bc)
    export npe_node_analdiag
    export memory_analdiag="48GB"

elif [[ ${step} = "sfcanl" ]]; then

    export wtime_sfcanl="00:10:00"
    export npe_sfcanl=6
    export nth_sfcanl=1
    npe_node_sfcanl=$(echo "${npe_node_max} / ${nth_sfcanl}" | bc)
    export npe_node_sfcanl
    export is_exclusive=True

elif [[ "${step}" = "fcst" || "${step}" = "efcs" ]]; then

    export is_exclusive=True

    if [[ "${step}" = "fcst" ]]; then
        _CDUMP_LIST=${CDUMP:-"gdas gfs"}
    elif [[ "${step}" = "efcs" ]]; then
        _CDUMP_LIST=${CDUMP:-"enkfgdas enkfgfs"}
    fi

    # During workflow creation, we need resources for all CDUMPs and CDUMP is undefined
    for _CDUMP in ${_CDUMP_LIST}; do
        if [[ "${_CDUMP}" =~ "gfs" ]]; then
          export layout_x=${layout_x_gfs}
          export layout_y=${layout_y_gfs}
          export WRITE_GROUP=${WRITE_GROUP_GFS}
          export WRTTASK_PER_GROUP_PER_THREAD=${WRTTASK_PER_GROUP_PER_THREAD_GFS}
          ntasks_fv3=${ntasks_fv3_gfs}
          ntasks_quilt=${ntasks_quilt_gfs}
          nthreads_fv3=${nthreads_fv3_gfs}
        fi

        # PETS for the atmosphere dycore
        (( FV3PETS = ntasks_fv3 * nthreads_fv3 ))
        echo "FV3 using (nthreads, PETS) = (${nthreads_fv3}, ${FV3PETS})"

        # PETS for quilting
        if [[ "${QUILTING:-}" = ".true." ]]; then
          (( QUILTPETS = ntasks_quilt * nthreads_fv3 ))
          (( WRTTASK_PER_GROUP = WRTTASK_PER_GROUP_PER_THREAD ))
          export WRTTASK_PER_GROUP
        else
          QUILTPETS=0
        fi
        echo "QUILT using (nthreads, PETS) = (${nthreads_fv3}, ${QUILTPETS})"

        # Total PETS for the atmosphere component
        ATMTHREADS=${nthreads_fv3}
        (( ATMPETS = FV3PETS + QUILTPETS ))
        export ATMPETS ATMTHREADS
        echo "FV3ATM using (nthreads, PETS) = (${ATMTHREADS}, ${ATMPETS})"

        # Total PETS for the coupled model (starting w/ the atmosphere)
        NTASKS_TOT=${ATMPETS}

        # The mediator PETS can overlap with other components, usually it lands on the atmosphere tasks.
        # However, it is suggested limiting mediator PETS to 300, as it may cause the slow performance.
        # See https://docs.google.com/document/d/1bKpi-52t5jIfv2tuNHmQkYUe3hkKsiG_DG_s6Mnukog/edit
        # TODO: Update reference when moved to ufs-weather-model RTD
        MEDTHREADS=${nthreads_mediator:-1}
        MEDPETS=${MEDPETS:-ATMPETS}
        [[ "${MEDPETS}" -gt 300 ]] && MEDPETS=300
        export MEDPETS MEDTHREADS
        echo "MEDIATOR using (threads, PETS) = (${MEDTHREADS}, ${MEDPETS})"

        CHMPETS=0; CHMTHREADS=0
        if [[ "${DO_AERO}" = "YES" ]]; then
          # GOCART shares the same grid and forecast tasks as FV3 (do not add write grid component tasks).
          (( CHMTHREADS = ATMTHREADS ))
          (( CHMPETS = FV3PETS ))
          # Do not add to NTASKS_TOT
          echo "GOCART using (threads, PETS) = (${CHMTHREADS}, ${CHMPETS})"
        fi
        export CHMPETS CHMTHREADS

        WAVPETS=0; WAVTHREADS=0
        if [[ "${DO_WAVE}" = "YES" ]]; then
          (( WAVPETS = ntasks_ww3 * nthreads_ww3 ))
          (( WAVTHREADS = nthreads_ww3 ))
          echo "WW3 using (threads, PETS) = (${WAVTHREADS}, ${WAVPETS})"
          (( NTASKS_TOT = NTASKS_TOT + WAVPETS ))
        fi
        export WAVPETS WAVTHREADS

        OCNPETS=0; OCNTHREADS=0
        if [[ "${DO_OCN}" = "YES" ]]; then
          (( OCNPETS = ntasks_mom6 * nthreads_mom6 ))
          (( OCNTHREADS = nthreads_mom6 ))
          echo "MOM6 using (threads, PETS) = (${OCNTHREADS}, ${OCNPETS})"
          (( NTASKS_TOT = NTASKS_TOT + OCNPETS ))
        fi
        export OCNPETS OCNTHREADS

        ICEPETS=0; ICETHREADS=0
        if [[ "${DO_ICE}" = "YES" ]]; then
          (( ICEPETS = ntasks_cice6 * nthreads_cice6 ))
          (( ICETHREADS = nthreads_cice6 ))
          echo "CICE6 using (threads, PETS) = (${ICETHREADS}, ${ICEPETS})"
          (( NTASKS_TOT = NTASKS_TOT + ICEPETS ))
        fi
        export ICEPETS ICETHREADS

        echo "Total PETS for ${_CDUMP} = ${NTASKS_TOT}"

        if [[ "${_CDUMP}" =~ "gfs" ]]; then
          declare -x "npe_${step}_gfs"="${NTASKS_TOT}"
          declare -x "nth_${step}_gfs"=1  # ESMF handles threading for the UFS-weather-model
          declare -x "npe_node_${step}_gfs"="${npe_node_max}"
        else
          declare -x "npe_${step}"="${NTASKS_TOT}"
          declare -x "nth_${step}"=1  # ESMF handles threading for the UFS-weather-model
          declare -x "npe_node_${step}"="${npe_node_max}"
        fi

    done

    case "${CASE}" in
      "C48" | "C96" | "C192")
        declare -x "wtime_${step}"="03:00:00"
        declare -x "wtime_${step}_gfs"="03:00:00"
        ;;
      "C384" | "C768" | "C1152")
        declare -x "wtime_${step}"="06:00:00"
        declare -x "wtime_${step}_gfs"="06:00:00"
        ;;
      *)
        echo "FATAL ERROR: Resolution ${CASE} not supported in ${step}"
        exit 1
        ;;
    esac

    unset _CDUMP _CDUMP_LIST
    unset NTASKS_TOT

elif [[ ${step} = "ocnpost" ]]; then

    export wtime_ocnpost="00:30:00"
    export npe_ocnpost=1
    export npe_node_ocnpost=1
    export nth_ocnpost=1
    export memory_ocnpost="96G"
    if [[ ${machine} == "JET" ]]; then
       # JET only has 88GB of requestable memory per node
       # so a second node is required to meet the requiremtn
       npe_ocnpost=2
    fi

elif [[ ${step} = "post" ]]; then

    export wtime_post="00:12:00"
    export wtime_post_gfs="01:00:00"
    export npe_post=126
    res=$(echo "${CASE}" | cut -c2-)
    if (( npe_post > res )); then
      export npe_post=${res}
    fi
    export nth_post=1
    export npe_node_post=${npe_post}
    export npe_node_post_gfs=${npe_post}
    export npe_node_dwn=${npe_node_max}
    if [[ "${npe_node_post}" -gt "${npe_node_max}" ]]; then export npe_node_post=${npe_node_max} ; fi
    if [[ "${npe_node_post_gfs}" -gt "${npe_node_max}" ]]; then export npe_node_post_gfs=${npe_node_max} ; fi
    export is_exclusive=True

elif [[ ${step} = "vrfy" ]]; then

    export wtime_vrfy="03:00:00"
    export wtime_vrfy_gfs="06:00:00"
    export npe_vrfy=3
    export nth_vrfy=1
    export npe_node_vrfy=1
    export npe_vrfy_gfs=1
    export npe_node_vrfy_gfs=1
    if [[ ${machine} == "HERA" ]]; then
      export memory_vrfy="16384M"
    fi
    export is_exclusive=True

elif [[ "${step}" = "fit2obs" ]]; then

    export wtime_fit2obs="00:20:00"
    export npe_fit2obs=3
    export nth_fit2obs=1
    export npe_node_fit2obs=1
    export memory_fit2obs="20G"
    if [[ ${machine} == "WCOSS2" ]]; then export npe_node_fit2obs=3 ; fi

elif [[ "${step}" = "metp" ]]; then

    export nth_metp=1
    export wtime_metp="03:00:00"
    export npe_metp=4
    export npe_node_metp=4
    export wtime_metp_gfs="06:00:00"
    export npe_metp_gfs=4
    export npe_node_metp_gfs=4
    export is_exclusive=True

elif [[ ${step} = "echgres" ]]; then

    export wtime_echgres="00:10:00"
    export npe_echgres=3
    export nth_echgres=${npe_node_max}
    export npe_node_echgres=1
    if [[ "${machine}" = "WCOSS2" ]]; then
      export memory_echgres="200GB"
    fi

elif [[ ${step} = "init_chem" ]]; then

    export wtime_init_chem="00:30:00"
    export npe_init_chem=1
    export npe_node_init_chem=1
    export is_exclusive=True

elif [[ ${step} = "mom6ic" ]]; then

    export wtime_mom6ic="00:30:00"
    export npe_mom6ic=24
    export npe_node_mom6ic=24
    export is_exclusive=True

elif [[ ${step} = "arch" || ${step} = "earc" ]]; then

    eval "export wtime_${step}='06:00:00'"
    eval "export npe_${step}=1"
    eval "export npe_node_${step}=1"
    eval "export nth_${step}=1"
    eval "export memory_${step}=4096M"
    if [[ "${machine}" = "WCOSS2" ]]; then
      eval "export memory_${step}=50GB"
    fi

elif [[ ${step} = "coupled_ic" ]]; then

    export wtime_coupled_ic="00:15:00"
    export npe_coupled_ic=1
    export npe_node_coupled_ic=1
    export nth_coupled_ic=1
    export is_exclusive=True

elif [[ ${step} = "ecen" ]]; then

    export wtime_ecen="00:10:00"
    export npe_ecen=80
    export nth_ecen=4
    if [[ "${machine}" = "HERA" ]]; then export nth_ecen=6; fi
    if [[ ${CASE} = "C384" || ${CASE} = "C192" || ${CASE} = "C96" || ${CASE} = "C48" ]]; then export nth_ecen=2; fi
    npe_node_ecen=$(echo "${npe_node_max} / ${nth_ecen}" | bc)
    export npe_node_ecen
    export nth_cycle=${nth_ecen}
    npe_node_cycle=$(echo "${npe_node_max} / ${nth_cycle}" | bc)
    export npe_node_cycle
    export is_exclusive=True

elif [[ ${step} = "esfc" ]]; then

    export wtime_esfc="00:06:00"
    export npe_esfc=80
    export nth_esfc=1
    npe_node_esfc=$(echo "${npe_node_max} / ${nth_esfc}" | bc)
    export npe_node_esfc
    export nth_cycle=${nth_esfc}
    npe_node_cycle=$(echo "${npe_node_max} / ${nth_cycle}" | bc)
    export npe_node_cycle
    export memory_esfc="80GB"

elif [[ ${step} = "epos" ]]; then

    export wtime_epos="00:15:00"
    export npe_epos=80
    export nth_epos=4
    if [[ "${machine}" == "HERA" ]]; then
      export nth_epos=6
    fi
    npe_node_epos=$(echo "${npe_node_max} / ${nth_epos}" | bc)
    export npe_node_epos
    export is_exclusive=True

elif [[ ${step} = "postsnd" ]]; then

    export wtime_postsnd="02:00:00"
    export npe_postsnd=40
    export nth_postsnd=8
    export npe_node_postsnd=10
    export npe_postsndcfp=9
    export npe_node_postsndcfp=1
    postsnd_req_cores=$(echo "${npe_node_postsnd} * ${nth_postsnd}" | bc)
    if [[ ${postsnd_req_cores} -gt "${npe_node_max}" ]]; then
        npe_node_postsnd=$(echo "${npe_node_max} / ${nth_postsnd}" | bc)
        export npe_node_postsnd
    fi
    export is_exclusive=True

elif [[ ${step} = "awips" ]]; then

    export wtime_awips="03:30:00"
    export npe_awips=1
    export npe_node_awips=1
    export nth_awips=1
    export memory_awips="3GB"

elif [[ ${step} = "gempak" ]]; then

    export wtime_gempak="03:00:00"
    export npe_gempak=2
    export npe_gempak_gfs=28
    export npe_node_gempak=2
    export npe_node_gempak_gfs=28
    export nth_gempak=1
    export memory_gempak="4GB"
    export memory_gempak_gfs="2GB"

else

    echo "Invalid step = ${step}, ABORT!"
    exit 2

fi

echo "END: config.resources"
