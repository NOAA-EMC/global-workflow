#! /usr/bin/env bash

########## config.resources ##########
# Set resource information for job tasks
# e.g. walltime, node, cores per node, memory etc.

if [ $# -ne 1 ]; then

    echo "Must specify an input task argument to set resource variables!"
    echo "argument can be any one of the following:"
    echo "getic init coupled_ic aerosol_init"
    echo "atmanalprep atmanalrun atmanalpost"
    echo "atmensanalprep atmensanalrun atmensanalpost"
    echo "landanlinit landanlrun landanlfinal"
    echo "aeroanlinit aeroanlrun aeroanlfinal"
    echo "anal sfcanl analcalc analdiag gldas fcst post vrfy metp arch echgres"
    echo "eobs ediag eomg eupd ecen esfc efcs epos earc"
    echo "init_chem mom6ic ocnpost"
    echo "waveinit waveprep wavepostsbs wavepostbndpnt wavepostbndpntbll wavepostpnt"
    echo "wavegempak waveawipsbulls waveawipsgridded"
    echo "postsnd awips gempak"
    echo "wafs wafsgrib2 wafsblending wafsgrib20p25 wafsblending0p25 wafsgcip"
    exit 1

fi

step=$1

echo "BEGIN: config.resources"

if [[ "${machine}" = "WCOSS2" ]]; then
   export npe_node_max=128
elif [[ "${machine}" = "JET" ]]; then
   if [[ ${PARTITION_BATCH} = "xjet" ]]; then
     export npe_node_max=24
   elif [[ ${PARTITION_BATCH} = "vjet" || ${PARTITION_BATCH} = "sjet" ]]; then
     export npe_node_max=16
   elif [[ ${PARTITION_BATCH} = "kjet" ]]; then
     export npe_node_max=40
   fi
elif [[ ${machine} = "HERA" ]]; then
   export npe_node_max=40
elif [[ ${machine} = "S4" ]]; then
   if [[ ${PARTITION_BATCH} = "s4" ]]; then
      export npe_node_max=32
   elif [[ ${PARTITION_BATCH} = "ivy" ]]; then
      export npe_node_max=20
   fi
elif [[ ${machine} = "ORION" ]]; then
   export npe_node_max=40
fi

if [ ${step} = "prep" ]; then
    export wtime_prep='00:30:00'
    export npe_prep=4
    export npe_node_prep=2
    export nth_prep=1
    if [[ "${machine}" = "WCOSS2" ]]; then
      export is_exclusive=True
    else
      export memory_prep="40G"
    fi

elif [ ${step} = "aerosol_init" ]; then
    export wtime_aerosol_init="00:05:00"
    export npe_aerosol_init=1
    export nth_aerosol_init=1
    export npe_node_aerosol_init=$(echo "${npe_node_max} / ${nth_aerosol_init}" | bc)
    export NTASKS=${npe_aerosol_init}
    export memory_aerosol_init="6G"

elif [ ${step} = "waveinit" ]; then

    export wtime_waveinit="00:10:00"
    export npe_waveinit=12
    export nth_waveinit=1
    export npe_node_waveinit=$(echo "${npe_node_max} / ${nth_waveinit}" | bc)
    export NTASKS=${npe_waveinit}
    export memory_waveinit="2GB"

elif [ ${step} = "waveprep" ]; then

    export wtime_waveprep="00:10:00"
    export npe_waveprep=5
    export npe_waveprep_gfs=65
    export nth_waveprep=1
    export nth_waveprep_gfs=1
    export npe_node_waveprep=$(echo "${npe_node_max} / ${nth_waveprep}" | bc)
    export npe_node_waveprep_gfs=$(echo "${npe_node_max} / ${nth_waveprep_gfs}" | bc)
    export NTASKS=${npe_waveprep}
    export NTASKS_gfs=${npe_waveprep_gfs}
    export memory_waveprep="100GB"
    export memory_waveprep_gfs="150GB"

elif [ ${step} = "wavepostsbs" ]; then

    export wtime_wavepostsbs="00:20:00"
    export wtime_wavepostsbs_gfs="03:00:00"
    export npe_wavepostsbs=8
    export nth_wavepostsbs=1
    export npe_node_wavepostsbs=$(echo "${npe_node_max} / ${nth_wavepostsbs}" | bc)
    export NTASKS=${npe_wavepostsbs}
    export memory_wavepostsbs="10GB"
    export memory_wavepostsbs_gfs="10GB"

elif [ ${step} = "wavepostbndpnt" ]; then

    export wtime_wavepostbndpnt="01:00:00"
    export npe_wavepostbndpnt=240
    export nth_wavepostbndpnt=1
    export npe_node_wavepostbndpnt=$(echo "${npe_node_max} / ${nth_wavepostbndpnt}" | bc)
    export NTASKS=${npe_wavepostbndpnt}
    export is_exclusive=True

elif [ ${step} = "wavepostbndpntbll" ]; then

    export wtime_wavepostbndpntbll="01:00:00"
    export npe_wavepostbndpntbll=448
    export nth_wavepostbndpntbll=1
    export npe_node_wavepostbndpntbll=$(echo "${npe_node_max} / ${nth_wavepostbndpntbll}" | bc)
    export NTASKS=${npe_wavepostbndpntbll}
    export is_exclusive=True

elif [ ${step} = "wavepostpnt" ]; then

    export wtime_wavepostpnt="01:30:00"
    export npe_wavepostpnt=200
    export nth_wavepostpnt=1
    export npe_node_wavepostpnt=$(echo "${npe_node_max} / ${nth_wavepostpnt}" | bc)
    export NTASKS=${npe_wavepostpnt}
    export is_exclusive=True

elif [ ${step} = "wavegempak" ]; then

    export wtime_wavegempak="02:00:00"
    export npe_wavegempak=1
    export nth_wavegempak=1
    export npe_node_wavegempak=$(echo "${npe_node_max} / ${nth_wavegempak}" | bc)
    export NTASKS=${npe_wavegempak}
    export memory_wavegempak="1GB"

elif [ ${step} = "waveawipsbulls" ]; then

    export wtime_waveawipsbulls="00:20:00"
    export npe_waveawipsbulls=1
    export nth_waveawipsbulls=1
    export npe_node_waveawipsbulls=$(echo "${npe_node_max} / ${nth_waveawipsbulls}" | bc)
    export NTASKS=${npe_waveawipsbulls}
    export is_exclusive=True

elif [ ${step} = "waveawipsgridded" ]; then

    export wtime_waveawipsgridded="02:00:00"
    export npe_waveawipsgridded=1
    export nth_waveawipsgridded=1
    export npe_node_waveawipsgridded=$(echo "${npe_node_max} / ${nth_waveawipsgridded}" | bc)
    export NTASKS=${npe_waveawipsgridded}
    export memory_waveawipsgridded_gfs="1GB"

elif [[ "${step}" = "atmanalprep" ]]; then

    export wtime_atmanalprep="00:10:00"
    export npe_atmanalprep=1
    export nth_atmanalprep=1
    npe_node_atmanalprep=$(echo "${npe_node_max} / ${nth_atmanalprep}" | bc)
    export npe_node_atmanalprep
    export memory_atmanalprep="3072M"

elif [[ "${step}" = "atmanalrun" ]]; then

    # make below case dependent later
    export layout_x=1
    export layout_y=1

    export wtime_atmanalrun="00:30:00"
    npe_atmanalrun=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export npe_atmanalrun
    npe_atmanalrun_gfs=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export npe_atmanalrun_gfs
    export nth_atmanalrun=1
    export nth_atmanalrun_gfs=${nth_atmanalrun}
    npe_node_atmanalrun=$(echo "${npe_node_max} / ${nth_atmanalrun}" | bc)
    export npe_node_atmanalrun
    export is_exclusive=True

elif [[ "${step}" = "atmanalpost" ]]; then

    export wtime_atmanalpost="00:30:00"
    export npe_atmanalpost=${npe_node_max}
    export nth_atmanalpost=1
    npe_node_atmanalpost=$(echo "${npe_node_max} / ${nth_atmanalpost}" | bc)
    export npe_node_atmanalpost
    export is_exclusive=True

elif [[ "${step}" = "landanlinit" ]]; then

   # below lines are for creating JEDI YAML
   case ${CASE} in
     C768)
        layout_x=6
        layout_y=6
        ;;
     C384)
        layout_x=5
        layout_y=5
        ;;
     C192 | C96 | C48)
        layout_x=1
        layout_y=1
        ;;
     *)
        echo "FATAL ERROR: Resolution not supported for land analysis'"
        exit 1
   esac

   export layout_x
   export layout_y

   export wtime_landanlinit="00:10:00"
   export npe_landanlinit=1
   export nth_landanlinit=1
   npe_node_landanlinit=$(echo "${npe_node_max} / ${nth_landanlinit}" | bc)
   export npe_node_landanlinit
   export memory_landanlinit="3072M"

elif [[ "${step}" = "landanlrun" ]]; then

   case ${CASE} in
     C768)
        layout_x=6
        layout_y=6
        ;;
     C384)
        layout_x=5
        layout_y=5
        ;;
     C192 | C96 | C48)
        layout_x=1
        layout_y=1
        ;;
     *)
        echo "FATAL: Resolution not supported'"
        exit 1
   esac

   export layout_x
   export layout_y

   export wtime_landanlrun="00:30:00"
   npe_landanlrun=$(echo "${layout_x} * ${layout_y} * 6" | bc)
   export npe_landanlrun
   npe_landanlrun_gfs=$(echo "${layout_x} * ${layout_y} * 6" | bc)
   export npe_landanlrun_gfs
   export nth_landanlrun=1
   export nth_landanlrun_gfs=1
   npe_node_landanlrun=$(echo "${npe_node_max} / ${nth_landanlrun}" | bc)
   export npe_node_landanlrun
   export is_exclusive=True

elif [[ "${step}" = "landanlfinal" ]]; then

   export wtime_landanlfinal="00:10:00"
   export npe_landanlfinal=1
   export nth_landanlfinal=1
   npe_node_landanlfinal=$(echo "${npe_node_max} / ${nth_landanlfinal}" | bc)
   export npe_node_landanlfinal
   export memory_landanlfinal="3072M"

elif [[ "${step}" = "aeroanlinit" ]]; then

   # below lines are for creating JEDI YAML
   case ${CASE} in
     C768)
        layout_x=6
        layout_y=6
        ;;
      C384)
        layout_x=5
        layout_y=5
        ;;
     C192 | C96 | C48)
        layout_x=8
        layout_y=8
        ;;
      *)
          echo "FATAL ERROR: Resolution not supported for aerosol analysis'"
          exit 1
    esac

    export layout_x
    export layout_y

    export wtime_aeroanlinit="00:10:00"
    export npe_aeroanlinit=1
    export nth_aeroanlinit=1
    npe_node_aeroanlinit=$(echo "${npe_node_max} / ${nth_aeroanlinit}" | bc)
    export npe_node_aeroanlinit
    export memory_aeroanlinit="3072M"

elif [[ "${step}" = "aeroanlrun" ]]; then

   case ${CASE} in
     C768)
        layout_x=6
        layout_y=6
        ;;
      C384)
        layout_x=5
        layout_y=5
        ;;
     C192 | C96 | C48)
        layout_x=8
        layout_y=8
        ;;
      *)
          echo "FATAL ERROR: Resolution ${CASE} is not supported, ABORT!"
          exit 1
    esac

    export layout_x
    export layout_y

    export wtime_aeroanlrun="00:30:00"
    npe_aeroanlrun=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export npe_aeroanlrun
    npe_aeroanlrun_gfs=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export npe_aeroanlrun_gfs
    export nth_aeroanlrun=1
    export nth_aeroanlrun_gfs=1
    npe_node_aeroanlrun=$(echo "${npe_node_max} / ${nth_aeroanlrun}" | bc)
    export npe_node_aeroanlrun
    export is_exclusive=True

elif [[ "${step}" = "aeroanlfinal" ]]; then

    export wtime_aeroanlfinal="00:10:00"
    export npe_aeroanlfinal=1
    export nth_aeroanlfinal=1
    npe_node_aeroanlfinal=$(echo "${npe_node_max} / ${nth_aeroanlfinal}" | bc)
    export npe_node_aeroanlfinal
    export memory_aeroanlfinal="3072M"

elif [[ "${step}" = "ocnanalprep" ]]; then

    export wtime_ocnanalprep="00:10:00"
    export npe_ocnanalprep=1
    export nth_ocnanalprep=1
    npe_node_ocnanalprep=$(echo "${npe_node_max} / ${nth_ocnanalprep}" | bc)
    export npe_node_ocnanalprep
    export memory_ocnanalprep="3072M"

elif [[ "${step}" = "ocnanalbmat" ]]; then
   npes=16
   case ${CASE} in
      C384)
        npes=480
        ;;
      C48)
        npes=16
        ;;
      *)
          echo "FATAL: Resolution not supported'"
          exit 1
    esac

    export wtime_ocnanalbmat="00:30:00"
    export npe_ocnanalbmat=${npes}
    export nth_ocnanalbmat=1
    export is_exclusive=True
    npe_node_ocnanalbmat=$(echo "${npe_node_max} / ${nth_ocnanalbmat}" | bc)
    export npe_node_ocnanalbmat

elif [[ "${step}" = "ocnanalrun" ]]; then
   npes=16
   case ${CASE} in
      C384)
        npes=480
        ;;
      C48)
        npes=16
        ;;
      *)
          echo "FATAL: Resolution not supported'"
          exit 1
    esac

    export wtime_ocnanalrun="00:30:00"
    export npe_ocnanalrun=${npes}
    export nth_ocnanalrun=1
    export is_exclusive=True
    npe_node_ocnanalrun=$(echo "${npe_node_max} / ${nth_ocnanalrun}" | bc)
    export npe_node_ocnanalrun

elif [[ "${step}" = "ocnanalpost" ]]; then

    export wtime_ocnanalpost="00:30:00"
    export npe_ocnanalpost=${npe_node_max}
    export nth_ocnanalpost=1
    npe_node_ocnanalpost=$(echo "${npe_node_max} / ${nth_ocnanalpost}" | bc)
    export npe_node_ocnanalpost

elif [ ${step} = "anal" ]; then

    export wtime_anal="00:50:00"
    export wtime_anal_gfs="00:40:00"
    export npe_anal=780
    export nth_anal=5
    export npe_anal_gfs=825
    export nth_anal_gfs=5
    if [[ "${machine}" = "WCOSS2" ]]; then
      export nth_anal=8
      export nth_anal_gfs=8
    fi
    if [ ${CASE} = "C384" ]; then
      export npe_anal=160
      export npe_anal_gfs=160
      export nth_anal=10
      export nth_anal_gfs=10
      if [[ ${machine} = "S4" ]]; then
         #For the analysis jobs, the number of tasks and cores used must be equal
         #On the S4-s4 partition, this is accomplished by increasing the task
         #count to a multiple of 32
         if [[ ${PARTITION_BATCH} = "s4" ]]; then
            export npe_anal=416
            export npe_anal_gfs=416
         fi
         #S4 is small, so run this task with just 1 thread
         export nth_anal=1
         export nth_anal_gfs=1
         export wtime_anal="02:00:00"
      fi
    fi
    if [[ ${CASE} = "C192" || ${CASE} = "C96" || ${CASE} = "C48" ]]; then
      export npe_anal=84
      export npe_anal_gfs=84
      if [[ ${machine} = "S4" ]]; then
         export nth_anal=4
         export nth_anal_gfs=4
         #Adjust job count for S4
         if [[ ${PARTITION_BATCH} = "s4" ]]; then
            export npe_anal=88
            export npe_anal_gfs=88
         elif [[ ${PARTITION_BATCH} = "ivy" ]]; then
            export npe_anal=90
            export npe_anal_gfs=90
         fi
      fi
    fi
    export npe_node_anal=$(echo "${npe_node_max} / ${nth_anal}" | bc)
    export nth_cycle=${nth_anal}
    export npe_node_cycle=$(echo "${npe_node_max} / ${nth_cycle}" | bc)
    export is_exclusive=True

elif [ ${step} = "analcalc" ]; then

    export wtime_analcalc="00:10:00"
    export npe_analcalc=127
    export ntasks=${npe_analcalc}
    export nth_analcalc=1
    export nth_echgres=4
    export nth_echgres_gfs=12
    export npe_node_analcalc=$(echo "${npe_node_max} / ${nth_analcalc}" | bc)
    export is_exclusive=True

elif [ ${step} = "analdiag" ]; then

    export wtime_analdiag="00:15:00"
    export npe_analdiag=96             # Should be at least twice npe_ediag
    export nth_analdiag=1
    export npe_node_analdiag=$(echo "${npe_node_max} / ${nth_analdiag}" | bc)
    export memory_analdiag="48GB"

elif [ ${step} = "sfcanl" ]; then

    export wtime_sfcanl="00:10:00"
    export npe_sfcanl=6
    export nth_sfcanl=1
    export npe_node_sfcanl=$(echo "${npe_node_max} / ${nth_sfcanl}" | bc)
    export is_exclusive=True

elif [ ${step} = "gldas" ]; then

    export wtime_gldas="00:10:00"
    export npe_gldas=112
    export nth_gldas=1
    export npe_node_gldas=$(echo "${npe_node_max} / ${nth_gldas}" | bc)
    export npe_gaussian=96
    export nth_gaussian=1
    export npe_node_gaussian=$(echo "${npe_node_max} / ${nth_gaussian}" | bc)
    export is_exclusive=True

elif [[ ${step} = "fcst" || ${step} = "efcs" ]]; then

    export is_exclusive=True

    if [[ ${step} == "fcst" ]]; then
        _CDUMP_LIST=${CDUMP:-"gdas gfs"}
    elif [[ ${step} == "efcs" ]]; then
        _CDUMP_LIST=${CDUMP:-"enkfgdas enkfgfs"}
    fi

    # During workflow creation, we need resources for all CDUMPs and CDUMP is undefined
    for _CDUMP in ${_CDUMP_LIST}; do
        if [[ ${_CDUMP} =~ "gfs" ]]; then
          export layout_x=${layout_x_gfs}
          export layout_y=${layout_y_gfs}
          export WRITE_GROUP=${WRITE_GROUP_GFS}
          export WRTTASK_PER_GROUP=${WRTTASK_PER_GROUP_GFS}
          ntasks_fv3=${ntasks_fv3_gfs}
          ntasks_quilt=${ntasks_quilt_gfs}
          nth_fv3=${nth_fv3_gfs}
        fi

        # PETS for the atmosphere dycore
        (( FV3PETS = ntasks_fv3 ))

        # PETS for quilting
        if [[ ${QUILTING:-} == ".true." ]]; then
          (( QUILTPETS = ntasks_quilt ))
        else
          QUILTPETS=0
        fi

        # Total PETS for the atmosphere component
        (( ATMPETS = FV3PETS + QUILTPETS))
        export ATMPETS

        # Total PETS for the coupled model (starting w/ the atmosphere)
        NTASKS_TOT=${ATMPETS}

        # The mediator PETS can overlap with other components, usually it lands on the atmosphere tasks.
        # However, it is suggested limiting mediator PETS to 300, as it may cause the slow performance.
        # See https://docs.google.com/document/d/1bKpi-52t5jIfv2tuNHmQkYUe3hkKsiG_DG_s6Mnukog/edit
        # TODO: Update reference with moved to RTD
        MEDPETS=${MEDPETS:-ATMPETS}
        [[ "${MEDPETS}" -gt 300 ]] && MEDPETS=300
        export MEDPETS

        if [[ ${DO_AERO} == "YES" ]]; then
          (( CHMPETS = ntasks_fv3 ))
          # GOCART shares the same grid and forecast tasks as FV3, do not add to NTASKS_TOT
          export CHMPETS
        fi

        if [[ ${DO_WAVE} == "YES" ]]; then
          (( WAVPETS = ntasks_ww3 ))
          (( NTASKS_TOT = NTASKS_TOT + WAVPETS ))
          export WAVPETS
        fi

        if [[ ${DO_OCN} == "YES" ]]; then
          (( OCNPETS = ntasks_mom6 ))
          (( NTASKS_TOT = NTASKS_TOT + OCNPETS ))
          export OCNPETS
        fi

        if [[ ${DO_ICE} == "YES" ]]; then
          (( ICEPETS = ntasks_cice6 ))
          (( NTASKS_TOT = NTASKS_TOT + ICEPETS ))
          export ICEPETS
        fi

        if [[ ${_CDUMP} =~ "gfs" ]]; then
          declare -x npe_${step}_gfs=${NTASKS_TOT}
          threads=${nth_fv3_gfs:-2}
          declare -x nth_${step}_gfs=${threads}
          declare -x npe_node_${step}_gfs=$(echo "${npe_node_max} / ${threads}" | bc)
        else
          declare -x npe_${step}=${NTASKS_TOT}
          threads=${nth_fv3:-2}
          declare -x nth_${step}=${threads}
          declare -x npe_node_${step}=$(echo "${npe_node_max} / ${threads}" | bc)
        fi
    done

    case "${CASE}" in
      "C48" | "C96" | "C192")
        declare -x wtime_${step}="00:30:00"
        declare -x wtime_${step}_gfs="03:00:00"
        ;;
      "C384" | "C768" | "C1152")
        declare -x wtime_${step}="01:00:00"
        declare -x wtime_${step}_gfs="06:00:00"
        ;;
      *)
        echo "FATAL ERROR: Resolution ${CASE} not supported in ${step}"
        exit 1
        ;;
    esac

elif [ ${step} = "ocnpost" ]; then

    export wtime_ocnpost="00:30:00"
    export npe_ocnpost=1
    export npe_node_ocnpost=1
    export nth_ocnpost=1
    export memory_ocnpost="96G"

elif [ ${step} = "post" ]; then

    export wtime_post="00:12:00"
    export wtime_post_gfs="01:00:00"
    export npe_post=126
    res=$(echo ${CASE} | cut -c2-)
    if (( npe_post > res )); then
      export npe_post=${res}
    fi
    export nth_post=1
    export npe_node_post=${npe_post}
    export npe_node_post_gfs=${npe_post}
    export npe_node_dwn=${npe_node_max}
    if [[ "${npe_node_post}" -gt "${npe_node_max}" ]]; then export npe_node_post=${npe_node_max} ; fi
    if [[ "${npe_node_post_gfs}" -gt "${npe_node_max}" ]]; then export npe_node_post_gfs=${npe_node_max} ; fi
    export is_exclusive=True

elif [ ${step} = "wafs" ]; then

    export wtime_wafs="00:30:00"
    export npe_wafs=1
    export npe_node_wafs=${npe_wafs}
    export nth_wafs=1
    export memory_wafs="1GB"

elif [ ${step} = "wafsgcip" ]; then

    export wtime_wafsgcip="00:30:00"
    export npe_wafsgcip=2
    export nth_wafsgcip=1
    export npe_node_wafsgcip=1
    export memory_wafsgcip="50GB"

elif [ ${step} = "wafsgrib2" ]; then

    export wtime_wafsgrib2="00:30:00"
    export npe_wafsgrib2=18
    export nth_wafsgrib2=1
    export npe_node_wafsgrib2=$(echo "${npe_node_max} / ${nth_wafsgrib2}" | bc)
    export memory_wafsgrib2="80GB"

elif [ ${step} = "wafsblending" ]; then

    export wtime_wafsblending="00:30:00"
    export npe_wafsblending=1
    export nth_wafsblending=1
    export npe_node_wafsblending=$(echo "${npe_node_max} / ${nth_wafsblending}" | bc)
    export memory_wafsblending="15GB"

elif [ ${step} = "wafsgrib20p25" ]; then

    export wtime_wafsgrib20p25="00:30:00"
    export npe_wafsgrib20p25=11
    export nth_wafsgrib20p25=1
    export npe_node_wafsgrib20p25=$(echo "${npe_node_max} / ${nth_wafsgrib20p25}" | bc)
    export memory_wafsgrib20p25="80GB"

elif [ ${step} = "wafsblending0p25" ]; then

    export wtime_wafsblending0p25="00:30:00"
    export npe_wafsblending0p25=1
    export nth_wafsblending0p25=1
    export npe_node_wafsblending0p25=$(echo "${npe_node_max} / ${nth_wafsblending0p25}" | bc)
    export memory_wafsblending0p25="15GB"

elif [ ${step} = "vrfy" ]; then

    export wtime_vrfy="03:00:00"
    export wtime_vrfy_gfs="06:00:00"
    export npe_vrfy=3
    export nth_vrfy=1
    export npe_node_vrfy=1
    export npe_vrfy_gfs=1
    export npe_node_vrfy_gfs=1
    if [[ ${machine} == "HERA" ]]; then
      export memory_vrfy="16384M"
    fi
    export is_exclusive=True

elif [ ${step} = "metp" ]; then

    export nth_metp=1
    export wtime_metp="03:00:00"
    export npe_metp=4
    export npe_node_metp=4
    export wtime_metp_gfs="06:00:00"
    export npe_metp_gfs=4
    export npe_node_metp_gfs=4
    export is_exclusive=True

elif [ ${step} = "echgres" ]; then

    export wtime_echgres="00:10:00"
    export npe_echgres=3
    export nth_echgres=${npe_node_max}
    export npe_node_echgres=1
    if [[ "${machine}" = "WCOSS2" ]]; then
      export memory_echgres="200GB"
    fi

elif [ ${step} = "init" ]; then

    export wtime_init="00:30:00"
    export npe_init=24
    export nth_init=1
    export npe_node_init=6
    export memory_init="70G"

elif [ ${step} = "init_chem" ]; then

    export wtime_init_chem="00:30:00"
    export npe_init_chem=1
    export npe_node_init_chem=1
    export is_exclusive=True

elif [ ${step} = "mom6ic" ]; then

    export wtime_mom6ic="00:30:00"
    export npe_mom6ic=24
    export npe_node_mom6ic=24
    export is_exclusive=True

elif [[ ${step} = "arch" || ${step} = "earc" || ${step} = "getic" ]]; then

    eval "export wtime_${step}='06:00:00'"
    eval "export npe_${step}=1"
    eval "export npe_node_${step}=1"
    eval "export nth_${step}=1"
    eval "export memory_${step}=2048M"
    if [[ "${machine}" = "WCOSS2" ]]; then
      eval "export memory_${step}=50GB"
    fi

elif [ ${step} = "coupled_ic" ]; then

    export wtime_coupled_ic="00:15:00"
    export npe_coupled_ic=1
    export npe_node_coupled_ic=1
    export nth_coupled_ic=1
    export is_exclusive=True

elif [ ${step} = "atmensanalprep" ]; then

    export wtime_atmensanalprep="00:10:00"
    export npe_atmensanalprep=1
    export nth_atmensanalprep=1
    export npe_node_atmensanalprep=$(echo "${npe_node_max} / ${nth_atmensanalprep}" | bc)
    export is_exclusive=True

elif [ ${step} = "atmensanalrun" ]; then

    # make below case dependent later
    export layout_x=2
    export layout_y=3

    export wtime_atmensanalrun="00:30:00"
    export npe_atmensanalrun=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export npe_atmensanalrun_gfs=$(echo "${layout_x} * ${layout_y} * 6" | bc)
    export nth_atmensanalrun=1
    export nth_atmensanalrun_gfs=${nth_atmensanalrun}
    export is_exclusive=True
    export npe_node_atmensanalrun=$(echo "${npe_node_max} / ${nth_atmensanalrun}" | bc)

elif [ ${step} = "atmensanalpost" ]; then

    export wtime_atmensanalpost="00:30:00"
    export npe_atmensanalpost=${npe_node_max}
    export nth_atmensanalpost=1
    export npe_node_atmensanalpost=$(echo "${npe_node_max} / ${nth_atmensanalpost}" | bc)
    export is_exclusive=True

elif [[ ${step} = "eobs" || ${step} = "eomg" ]]; then

    export wtime_eobs="00:15:00"
    export wtime_eomg="01:00:00"
    if [[ ${CASE} = "C768" ]]; then
      export npe_eobs=200
    elif [[ ${CASE} = "C384" ]]; then
      export npe_eobs=100
    elif [[ ${CASE} = "C192" || ${CASE} = "C96" || ${CASE} = "C48" ]]; then
      export npe_eobs=40
    fi
    export npe_eomg=${npe_eobs}
    export nth_eobs=2
    export nth_eomg=${nth_eobs}
    export npe_node_eobs=$(echo "${npe_node_max} / ${nth_eobs}" | bc)
    export npe_node_eomg=${npe_node_eobs}
    export is_exclusive=True
    #The number of tasks and cores used must be the same for eobs
    #For S4, this is accomplished by running 10 tasks/node
    if [[ ${machine} = "S4" ]]; then
       export npe_node_eobs=10
    fi

elif [ ${step} = "ediag" ]; then

    export wtime_ediag="00:15:00"
    export npe_ediag=48
    export nth_ediag=1
    export npe_node_ediag=$(echo "${npe_node_max} / ${nth_ediag}" | bc)
    export memory_ediag="30GB"

elif [ ${step} = "eupd" ]; then

    export wtime_eupd="00:30:00"
    if [ ${CASE} = "C768" ]; then
      export npe_eupd=480
      export nth_eupd=6
      if [[ "${machine}" = "WCOSS2" ]]; then
        export npe_eupd=315
        export nth_eupd=14
      fi
    elif [ ${CASE} = "C384" ]; then
      export npe_eupd=270
      export nth_eupd=2
      if [[ "${machine}" = "WCOSS2" ]]; then
        export npe_eupd=315
        export nth_eupd=14
      elif [[ "${machine}" = "HERA" ]]; then
        export nth_eupd=8
      fi
      if [[ ${machine} = "S4" ]]; then
         export npe_eupd=160
         export nth_eupd=2
      fi
    elif [[ ${CASE} = "C192" || ${CASE} = "C96" || ${CASE} = "C48" ]]; then
      export npe_eupd=42
      export nth_eupd=2
      if [[ "${machine}" = "HERA" ]]; then
        export nth_eupd=4
      fi
    fi
    export npe_node_eupd=$(echo "${npe_node_max} / ${nth_eupd}" | bc)
    export is_exclusive=True

elif [ ${step} = "ecen" ]; then

    export wtime_ecen="00:10:00"
    export npe_ecen=80
    export nth_ecen=4
    if [[ "${machine}" = "HERA" ]]; then export nth_ecen=6; fi
    if [[ ${CASE} = "C384" || ${CASE} = "C192" || ${CASE} = "C96" || ${CASE} = "C48" ]]; then export nth_ecen=2; fi
    export npe_node_ecen=$(echo "${npe_node_max} / ${nth_ecen}" | bc)
    export nth_cycle=${nth_ecen}
    export npe_node_cycle=$(echo "${npe_node_max} / ${nth_cycle}" | bc)
    export is_exclusive=True

elif [ ${step} = "esfc" ]; then

    export wtime_esfc="00:06:00"
    export npe_esfc=80
    export nth_esfc=1
    export npe_node_esfc=$(echo "${npe_node_max} / ${nth_esfc}" | bc)
    export nth_cycle=${nth_esfc}
    export npe_node_cycle=$(echo "${npe_node_max} / ${nth_cycle}" | bc)
    export memory_esfc="80GB"

elif [ ${step} = "epos" ]; then

    export wtime_epos="00:15:00"
    export npe_epos=80
    export nth_epos=4
    if [[ "${machine}" == "HERA" ]]; then
      export nth_epos=6
    fi
    export npe_node_epos=$(echo "${npe_node_max} / ${nth_epos}" | bc)
    export is_exclusive=True

elif [ ${step} = "postsnd" ]; then

    export wtime_postsnd="02:00:00"
    export npe_postsnd=40
    export nth_postsnd=8
    export npe_node_postsnd=10
    export npe_postsndcfp=9
    export npe_node_postsndcfp=1
    if [[ "$(echo "${npe_node_postsnd} * ${nth_postsnd}" | bc)" -gt "${npe_node_max}" ]]; then
        export npe_node_postsnd=$(echo "${npe_node_max} / ${nth_postsnd}" | bc)
    fi
    export is_exclusive=True

elif [ ${step} = "awips" ]; then

    export wtime_awips="03:30:00"
    export npe_awips=1
    export npe_node_awips=1
    export nth_awips=1
    export memory_awips="3GB"

elif [ ${step} = "gempak" ]; then

    export wtime_gempak="03:00:00"
    export npe_gempak=2
    export npe_gempak_gfs=28
    export npe_node_gempak=2
    export npe_node_gempak_gfs=28
    export nth_gempak=1
    export memory_gempak="4GB"
    export memory_gempak_gfs="2GB"

else

    echo "Invalid step = ${step}, ABORT!"
    exit 2

fi

echo "END: config.resources"
