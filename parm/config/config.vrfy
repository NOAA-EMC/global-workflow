#! /usr/bin/env bash

########## config.vrfy ##########
# Verification step specific

echo "BEGIN: config.vrfy"

# Get task specific resources
. $EXPDIR/config.resources vrfy

export VDUMP="gfs"                # Verifying dump
export CDUMPFCST="gdas"           # Fit-to-obs with GDAS/GFS prepbufr
export CDFNL="gdas"               # Scores verification against GDAS/GFS analysis

export MKPGB4PRCP="YES"           # Make 0.25-deg pgb files in ARCDIR for precip verification
export VRFYFITS="YES"             # Fit to observations
export VRFYRAD="YES"              # Radiance data assimilation monitoring
export VRFYOZN="YES"              # Ozone data assimilation monitoring
export VRFYMINMON="YES"           # GSI minimization monitoring
export VRFYTRAK="YES"             # Hurricane track verification
export VRFYGENESIS="YES"          # Cyclone genesis verification
export VRFYFSU="NO"               # Cyclone genesis verification (FSU)
export RUNMOS="NO"                # whether to run entire MOS package

#-------------------------------------------------
# Fit to Observations
#-------------------------------------------------

if [ $VRFYFITS = "YES" ]; then

    export fit_ver="newm.1.3"
    export fitdir="$BASE_GIT/verif/global/Fit2Obs/${fit_ver}/batrun"
    export PRVT=$HOMEgfs/fix/gsi/prepobs_errtable.global
    export HYBLEVS=$HOMEgfs/fix/am/global_hyblev.l${LEVS}.txt
    export CUE2RUN=$QUEUE

    export VBACKUP_FITS=24

    export CONVNETC="NO"
    if [ ${netcdf_diag:-".false."} = ".true." ]; then
        export CONVNETC="YES"
    fi

    if [ $machine = "HERA" ]; then
        export PREPQFITSH="$fitdir/subfits_hera_slurm"
    elif [ $machine = "S4" ]; then
        export PREPQFITSH="$fitdir/subfits_s4_slurm"
    elif [ $machine = "ORION" ]; then
        export PREPQFITSH="$fitdir/subfits_orion_netcdf"
    else
        echo "Fit2Obs NOT supported on this machine"
    fi

fi


#----------------------------------------------------------
# Minimization, Radiance and Ozone Monitoring
#----------------------------------------------------------

if [ $VRFYRAD = "YES" -o $VRFYMINMON = "YES" -o $VRFYOZN = "YES" ]; then

    export envir="para"
    export COM_IN=$ROTDIR

    # Radiance Monitoring
    if [[ "$VRFYRAD" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then

        export RADMON_SUFFIX=$PSLOT
        export TANKverf="$NOSCRUB/monitor/radmon"
        export VRFYRADSH="$HOMEgfs/jobs/JGDAS_ATMOS_VERFRAD"

    fi

    # Minimization Monitoring
    if [[ "$VRFYMINMON" = "YES" ]] ; then

        export MINMON_SUFFIX=$PSLOT
        export M_TANKverf="$NOSCRUB/monitor/minmon"
        if [[ "$CDUMP" = "gdas" ]] ; then
            export VRFYMINSH="$HOMEgfs/jobs/JGDAS_ATMOS_VMINMON"
        elif [[ "$CDUMP" = "gfs" ]] ; then
            export VRFYMINSH="$HOMEgfs/jobs/JGFS_ATMOS_VMINMON"
        fi

    fi

    # Ozone Monitoring
    if [[ "$VRFYOZN" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then

        export HOMEgfs_ozn="$HOMEgfs"
        export OZNMON_SUFFIX=$PSLOT
        export TANKverf_ozn="$NOSCRUB/monitor/oznmon"
        export VRFYOZNSH="$HOMEgfs/jobs/JGDAS_ATMOS_VERFOZN"

    fi

fi


#-------------------------------------------------
# Cyclone genesis and cyclone track verification
#-------------------------------------------------

export ens_tracker_ver=v1.1.15.5
export HOMEens_tracker=$BASE_GIT/TC_tracker/${ens_tracker_ver}

if [ "$VRFYTRAK" = "YES" ]; then

    export TRACKERSH="$HOMEgfs/jobs/JGFS_ATMOS_CYCLONE_TRACKER"
    export COMINsyn=${COMINsyn:-$(compath.py ${envir}/com/gfs/${gfs_ver})/syndat}
    if [ "$CDUMP" = "gdas" ]; then
        export FHOUT_CYCLONE=3
        export FHMAX_CYCLONE=$FHMAX
    else
        export FHOUT_CYCLONE=6
        export FHMAX_CYCLONE=$(( FHMAX_GFS<240 ? FHMAX_GFS : 240 ))
    fi
fi


if [[ "$VRFYGENESIS" == "YES" && "$CDUMP" == "gfs" ]]; then

    export GENESISSH="$HOMEgfs/jobs/JGFS_ATMOS_CYCLONE_GENESIS"
fi

if [[ "$VRFYFSU" == "YES" && "$CDUMP" == "gfs" ]]; then

    export GENESISFSU="$HOMEgfs/jobs/JGFS_ATMOS_FSU_GENESIS"
fi

if [[ "$RUNMOS" == "YES" && "$CDUMP" == "gfs" ]]; then

    if [ "$machine" = "HERA" ] ; then
        export RUNGFSMOSSH="${HOMEgfs}/scripts/run_gfsmos_master.sh.hera"
    else
        echo "WARNING: MOS package is not enabled on ${machine}!"
        export RUNMOS="NO"
        export RUNGFSMOSSH=""
    fi
fi


echo "END: config.vrfy"
