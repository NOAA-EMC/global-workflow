def Machine = 'none'
def machine = 'none'
def HOME = 'none'
def caseList = ''
// Location of the custom workspaces for each machine in the CI system.  They are persitent for each iteration of the PR.
def custom_workspace = [hera: '/scratch1/NCEPDEV/global/CI', orion: '/work2/noaa/stmp/CI/ORION', hercules: '/work2/noaa/stmp/CI/HERCULES']
def repo_url = 'git@github.com:NOAA-EMC/global-workflow.git'
def STATUS = 'Passed'

pipeline {

    agent { label 'built-in' }

    options {
        skipDefaultCheckout()
        //parallelsAlwaysFailFast()
    }

    stages { // This initial stage is used to get the Machine name from the GitHub labels on the PR
             // which is used to designate the Nodes in the Jenkins Controler by the agent label
             // Each Jenknis Node is connected to said machine via an JAVA agent via an ssh tunnel
             // no op 2

        stage('1. Get Machine') {
            agent { label 'built-in' }
            steps {
                script {

                    def causes = currentBuild.rawBuild.getCauses()
                    def isSpawnedFromAnotherJob = causes.any { cause ->
                        cause instanceof hudson.model.Cause.UpstreamCause
                    }

                    def run_nodes = []
                    if (isSpawnedFromAnotherJob) {
                        echo "machine being set to value passed to this spawned job"
                        echo "passed machine: ${params.machine}"
                        machine = params.machine
                    } else {
                        echo "This is parent job so getting list of nodes matching labels:"
                        for (label in pullRequest.labels) {
                            if (label.matches("CI-(.*?)-Ready")) {
                                def Machine_name = label.split('-')[1].toString()
                                jenkins.model.Jenkins.get().computers.each { c ->
                                    if (c.node.selfLabel.name == "${Machine_name}-EMC") {
                                        run_nodes.add(c.node.selfLabel.name)
                                    }
                                }
                            }
                        }
                        // Spawning all the jobs on the nodes matching the labels
                        if (run_nodes.size() > 1) {
                            run_nodes.init().each { node ->
                                def machine_name = node.split('-')[0].toLowerCase()
                                echo "Spawning job on node: ${node} with machine name: ${machine_name}"
                                build job: "/global-workflow/EMC-Global-Pipeline/PR-${env.CHANGE_ID}", parameters: [
                                    string(name: 'machine', value: machine_name),
                                    string(name: 'Node', value: node) ],
                                    wait: false
                            }
                            machine = run_nodes.last().split('-')[0].toLowerCase()
                            echo "Running parent job: ${machine}"
                        } else {
                            machine = run_nodes[0].split('-')[0].toLowerCase()
                            echo "Running only the parent job: ${machine}"
                        }
                    }
                }
            }
        }

        stage('2. Get Common Workspace') {
            agent { label "${machine}-emc" }
            steps {
                script {
                    Machine = machine[0].toUpperCase() + machine.substring(1)
                    echo "Getting Common Workspace for ${Machine}"
                    ws("${custom_workspace[machine]}/${env.CHANGE_ID}") {
                        properties([parameters([[$class: 'NodeParameterDefinition', allowedSlaves: ['built-in', 'Hercules-EMC', 'Hera-EMC', 'Orion-EMC'], defaultSlaves: ['built-in'], name: '', nodeEligibility: [$class: 'AllNodeEligibility'], triggerIfResult: 'allCases']])])
                        HOME = "${WORKSPACE}"
                        sh(script: "mkdir -p ${HOME}/RUNTESTS;rm -Rf ${HOME}/RUNTESTS/*")
                        sh(script: """${GH} pr edit ${env.CHANGE_ID} --repo ${repo_url} --add-label "CI-${Machine}-Building" --remove-label "CI-${Machine}-Ready" """)
                    }
                    echo "Building and running on ${Machine} in directory ${HOME}"
                }
            }
        }

        stage('3. Build System') {
            matrix {
                agent { label "${machine}-emc" }
                //options {
                //    throttle(['global_matrix_build'])
                //}
                axes {
                    axis {
                        name 'system'
                        values 'gfs', 'gefs'
                    }
                }
                stages {
                    stage('build system') {
                        steps {
                            script {
                                def HOMEgfs = "${HOME}/${system}" // local HOMEgfs is used to build the system on per system basis under the common workspace HOME
                                sh(script: "mkdir -p ${HOMEgfs}")
                                ws(HOMEgfs) {
                                    if (fileExists("${HOMEgfs}/sorc/BUILT_semaphor")) { // if the system is already built, skip the build in the case of re-runs
                                        sh(script: "cat ${HOMEgfs}/sorc/BUILT_semaphor", returnStdout: true).trim() // TODO: and user configurable control to manage build semphore
                                        checkout scm
                                        dir('sorc') {
                                            sh(script: './link_workflow.sh')
                                        }
                                    } else {
                                        checkout scm
                                        def gist_url = ""
                                        def error_logs = ""
                                        def error_logs_message = ""
                                        def builds_file = readYaml file: 'ci/cases/yamls/build.yaml'
                                        def build_args_list = builds_file['builds']
                                        def build_args = build_args_list[system].join(' ').trim().replaceAll('null', '')
                                        dir("${HOMEgfs}/sorc") {
                                            try {
                                                sh(script: "${build_args}")
                                            } catch (Exception error_build) {
                                                echo "Failed to build system: ${error_build.getMessage()}"
                                                if ( fileExists("logs/error.logs") ) {
                                                    def fileContent = readFile 'logs/error.logs'
                                                    def lines = fileContent.readLines()
                                                    for (line in lines) {
                                                        echo "archiving: ${line}"
                                                        if (fileExists("${line}") && readFile("${line}").length() > 0 ){
                                                            try {
                                                                archiveArtifacts artifacts: "${line}", fingerprint: true
                                                                error_logs = error_logs + "${HOMEgfs}/sorc/${line} "
                                                                error_logs_message = error_logs_message + "${HOMEgfs}/sorc/${line}\n"
                                                            }
                                                            catch (Exception error_arch) { echo "Failed to archive error log ${line}: ${error_arch.getMessage()}" }
                                                        }
                                                    }
                                                    try {
                                                        sh(script: "${HOMEgfs}/ci/scripts/utils/publish_logs.py --file ${error_logs} --repo PR_BUILD_${env.CHANGE_ID}")
                                                        gist_url=sh(script: "${HOMEgfs}/ci/scripts/utils/publish_logs.py --file ${error_logs} --gist PR_BUILD_${env.CHANGE_ID}", returnStdout: true).trim()
                                                        sh(script:  """${GH} pr comment ${env.CHANGE_ID} --repo ${repo_url} --body "Build **FAILED** on **${Machine}** with error logs:\n\\`\\`\\`\n${error_logs_message}\\`\\`\\`\n\nFollow link here to view the contents of the above file(s): [(link)](${gist_url})" """)
                                                    } catch (Exception error_comment) {
                                                        echo "Failed to comment on PR: ${error_comment.getMessage()}"
                                                    }
                                                    error("Failed to build system on ${Machine}")
                                                }
                                            }
                                            sh(script: './link_workflow.sh')
                                            //sh(script: "echo ${HOMEgfs} > BUILT_semaphor")
                                        }
                                    }
                                    if (env.CHANGE_ID && system == 'gfs') {
                                        try {
                                            sh(script: """${GH} pr edit ${env.CHANGE_ID} --repo ${repo_url} --add-label "CI-${Machine}-Running" --remove-label "CI-${Machine}-Building" """)
                                        } catch (Exception e) {
                                            echo "Failed to update label from Buildng to Running: ${e.getMessage()}"
                                        }
                                    }
                                    if (system == 'gfs') {
                                        caseList = sh(script: "${HOMEgfs}/ci/scripts/utils/get_host_case_list.py ${machine}", returnStdout: true).trim().split()
                                    }
                               }
                           }
                        }
                    }
                }
            }
        }

        stage('4. Run Tests') {
            failFast false 
            matrix {
                agent { label "${machine}-emc" }
                axes {
                    axis {
                        name 'Case'
                        // TODO add dynamic list of cases from env vars (needs addtional plugins)
                        values 'C48C48_ufs_hybatmDA', 'C48_ATM', 'C48_S2SW', 'C48_S2SWA_gefs', 'C48mx500_3DVarAOWCDA', 'C96C48_hybatmDA', 'C96_atm3DVar', 'C96_atmaerosnowDA'
                    }
                }
                stages {

                    stage('Create Experiments') {
                        when {
                            expression { return caseList.contains(Case) }
                        }
                        steps {
                                script {
                                    sh(script: "sed -n '/{.*}/!p' ${HOME}/gfs/ci/cases/pr/${Case}.yaml > ${HOME}/gfs/ci/cases/pr/${Case}.yaml.tmp")
                                    def yaml_case = readYaml file: "${HOME}/gfs/ci/cases/pr/${Case}.yaml.tmp"
                                    system = yaml_case.experiment.system
                                    def HOMEgfs = "${HOME}/${system}"   // local HOMEgfs is used to populate the XML on per system basis
                                    env.RUNTESTS = "${HOME}/RUNTESTS"
                                    sh(script: "${HOMEgfs}/ci/scripts/utils/ci_utils_wrapper.sh create_experiment ${HOMEgfs}/ci/cases/pr/${Case}.yaml")
                                }
                        }
                    }

                    stage('Run Experiments') {
                        when {
                            expression { return caseList.contains(Case) }
                        }
                        failFast false
                        steps {
                            script {
                                HOMEgfs = "${HOME}/gfs"  // common HOMEgfs is used to launch the scripts that run the experiments
                                def pslot = sh(script: "${HOMEgfs}/ci/scripts/utils/ci_utils_wrapper.sh get_pslot ${HOME}/RUNTESTS ${Case}", returnStdout: true).trim()
                                def error_file = "${HOME}/RUNTESTS/${pslot}_error.logs"
                                sh(script: " rm -f ${error_file}")
                                try {
                                    sh(script: "${HOMEgfs}/ci/scripts/run-check_ci.sh ${HOME} ${pslot} ${system}")
                                } catch (Exception error_experment) {
                                    sh(script: "${HOMEgfs}/ci/scripts/utils/ci_utils_wrapper.sh cancel_batch_jobs ${pslot}")
                                    ws(HOME) {
                                        def error_logs = ""
                                        def error_logs_message = ""
                                        if (fileExists(error_file)) {
                                            def fileContent = readFile error_file
                                            def lines = fileContent.readLines()
                                            for (line in lines) {
                                                echo "archiving: ${line}"
                                                if (fileExists("${HOME}/${line}") && readFile("${HOME}/${line}").length() > 0) {
                                                    try {
                                                        archiveArtifacts artifacts: "${line}", fingerprint: true
                                                        error_logs = error_logs + "${HOME}/${line} "
                                                        error_logs_message = error_logs_message + "${HOME}/${line}\n"
                                                    } catch (Exception error_arch) {
                                                        echo "Failed to archive error log ${line}: ${error_arch.getMessage()}"
                                                    }
                                                }
                                            }
                                            try {
                                                gist_url = sh(script: "${HOMEgfs}/ci/scripts/utils/publish_logs.py --file ${error_logs} --gist PR_${env.CHANGE_ID}", returnStdout: true).trim()
                                                sh(script: """${GH} pr comment ${env.CHANGE_ID} --repo ${repo_url} --body "Experiment ${Case} **FAILED** on ${Machine} with error logs:\n\\`\\`\\`\n${error_logs_message}\\`\\`\\`\n\nFollow link here to view the contents of the above file(s): [(link)](${gist_url})" """)
                                                sh(script: "${HOMEgfs}/ci/scripts/utils/publish_logs.py --file ${error_logs} --repo PR_${env.CHANGE_ID}")
                                            } catch (Exception error_comment) {
                                                echo "Failed to comment on PR: ${error_comment.getMessage()}"
                                            }
                                        } else {
                                            echo "No error logs found for failed cases in $HOME/RUNTESTS/${pslot}_error.logs"
                                        }
                                        STATUS = 'Failed'
                                        try {
                                            sh(script: """${GH} pr edit ${env.CHANGE_ID} --repo ${repo_url} --remove-label "CI-${Machine}-Running" --add-label "CI-${Machine}-${STATUS}" """, returnStatus: true)
                                            sh(script: """${GH} pr comment ${env.CHANGE_ID} --repo ${repo_url} --body "Experiment ${Case} **FAILED** on ${Machine} in\n\\`${HOME}/RUNTESTS/${pslot}\\`" """)
                                        } catch (Exception e) {
                                            echo "Failed to update label from Running to ${STATUS}: ${e.getMessage()}"
                                        }
                                        error("Failed to run experiments ${Case} on ${Machine}")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage( '5. FINALIZE' ) {
            when { 
                expression {
                   STATUS == 'Passed'
                }
            }
            agent { label "${machine}-emc" }
            steps {
                script {
                    try {
                        sh(script: """${GH} pr edit ${env.CHANGE_ID} --repo ${repo_url} --remove-label "CI-${Machine}-Running" --remove-label "CI-${Machine}-Building" --add-label "CI-${Machine}-${STATUS}" """, returnStatus: true)
                        sh(script: """${GH} pr comment ${env.CHANGE_ID} --repo ${repo_url} --body "**CI ${STATUS}** ${Machine} at <br>Built and ran in directory \\`${HOME}\\`" """, returnStatus: true)
                    } catch (Exception e) {
                        echo "Failed to update label from Running to ${STATUS}: ${e.getMessage()}"
                    }
                }
            }
        }   
    }
}
