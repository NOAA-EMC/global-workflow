#!/bin/sh
usage="\
Usage:  $0 [options] executable [args]
      where the options are:
      -a account        account (default: none)
      -b binding        run smt binding or not (default:NO)
      -d dirin          initial directory (default: cwd)
      -e envars         copy comma-separated environment variables
      -g group          group name
      -i                append standard input to command file
      -j jobname        specify jobname (default: executable basename)
      -m machine        machine on which to run (default: current)
      -n                write command file to stdout rather than submitting it
      -o output         specify output file (default: jobname.out)
      -p procs[/nodes[/ppreq]
                        number of MPI tasks and optional nodes or Bblocking and
                        ppreq option (N or S) (defaults: serial, Bunlimited, S)
      -q queue[/qpreq]  queue name and optional requirement, e.g. dev/P
                        (defaults: 1 if serial or dev if parallel and none)
                        (queue 3 or 4 is dev or prod with twice tasks over ip)
                        (options: P=parallel, B=bigmem, b=batch)
      -r rmem[/rcpu]    resources memory and cpus/task (default: '1024 mb', 1)
      -t timew          wall time limit in [[hh:]mm:]ss format (default: 900)
      -u userid         userid to run under (default: self)
      -v                verbose mode
      -w when           when to run, in yyyymmddhh[mm], +hh[mm], thh[mm], or
                        Thh[mm] (full, incremental, today or tomorrow) format
                        (default: now)
Function:  This command submits a job to the batch queue."
subcmd="$*"
stdin=NO
nosub=NO
account=""
binding="NO"
dirin=""
envars=""
group=""
jobname=""
machine=""
output=""
procs=0
nodes=""
ppreq=""
queue=""
qpreq=""
rmem="1024"
rcpu="1"
timew="900"
userid=""
verbose=NO
when=""
while getopts a:b:d:e:g:ij:m:no:p:q:r:t:u:vw: opt;do
  case $opt in
    a) account="$OPTARG";;
    b) binding="$OPTARG";;
    d) dirin="$OPTARG";;
    e) envars="$OPTARG";;
    g) group="$OPTARG";;
    i) stdin=YES;;
    j) jobname=$OPTARG;;
    m) machine="$OPTARG";;
    n) nosub=YES;;
    o) output=$OPTARG;;
    p) procs=$(echo $OPTARG/|cut -d/ -f1);nodes=$(echo $OPTARG/|cut -d/ -f2);ppreq=$(echo $OPTARG/|cut -d/ -f3);;
    q) queue=$(echo $OPTARG/|cut -d/ -f1);qpreq=$(echo $OPTARG/|cut -d/ -f2);;
    r) rmem=$(echo $OPTARG/|cut -d/ -f1);rcpu=$(echo $OPTARG/|cut -d/ -f2);;
    t) timew=$OPTARG;;
    u) userid=$OPTARG;;
    v) verbose=YES;;
    w) when=$OPTARG;;
    \?) echo $0: invalid option >&2;echo "$usage" >&2;exit 1;;
  esac
done
shift $(($OPTIND-1))
if [[ $# -eq 0 ]];then
  echo $0: missing executable name >&2;echo "$usage" >&2;exit 1
fi
exec=$1
if [[ ! -s $exec ]]&&which $exec >/dev/null 2>&1;then
  exec=$(which $exec)
fi
shift
args="$*"
bn=$(basename $exec)
export jobname=${jobname:-$bn}
output=${output:-$jobname.out}
myuser=$(logname)
myuser=$LOGNAME
myhost=$(hostname)
. /u/wx23sm/bin/mkdata
unset LOADL_CONFIG
export TZ=GMT
cfile=$DATA/sub$$
> $cfile
echo "#!/bin/sh" >>$cfile
echo "" >>$cfile
echo "#@ job_name = $jobname" >>$cfile
sh="shared"
if [[ $procs -gt 0 ]];then
  [[ -n $nodes ]] || nodes=Bunlimited
  if [[ $queue = "3" ]];then
    queue="dev"
    sw=ip
    procs=$((2*$procs))
  elif [[ $queue = "4" ]];then
    queue="prod"
    sw=ip
    procs=$((2*$procs))
  else
    sw=us
  fi
  if [[ $ppreq = *N* ]];then
    sh="not_shared"
  else
    sh="shared"
  fi
  echo "#@ job_type = parallel"
  echo "#@ network.MPI = sn_all,shared,$sw"
  echo "#@ node_usage = $sh"
  if [[ $ppreq = *Tgt* ]];then
    if [[ $ppreq != *Usr* ]] ; then
      echo "#@ task_geometry = {\\"
      n=0
      while [[ $n -lt $nodes ]];do
        p=$n
        tg="# ( $p"
        ((p+=nodes))
        while [[ $p -lt $procs ]];do
          tg="$tg, $p"
          ((p+=nodes))
        done
        tg="$tg )\\"
        echo $tg
        ((n+=1))
      done
      echo "# }"
      queue=${queue:-devhigh}
    fi
  else
    echo "#@ tasks_per_node = $procs"
    if [[ $nodes = B* ]];then
      echo "#@ blocking = $(echo $nodes|cut -c2-)"
    else
      echo "#@ node = $nodes"
    fi
  fi
  queue=${queue:-dev}
else
  queue=${queue:-1}
fi >>$cfile
echo "#@ class = $queue" >>$cfile
if [[ $queue = dev && $qpreq = *P* ]];then
  echo "#@ group = devqpri"
fi >>$cfile
if [[ $queue = dev && $qpreq = *O* ]];then
  echo "#@ group = devonprod"
fi >>$cfile
if [[ $queue = devhigh ]];then
  echo "#@ group = devonprod"
fi >>$cfile
if [[ $queue = [12] && $qpreq = *!b* ]];then
  pr=requirements
  echo "#@ $pr = Feature != \"batch_node\""
elif [[ $queue = [12] && $qpreq = *b* ]];then
  pr=requirements
  echo "#@ $pr = Feature == \"batch_node\""
fi >>$cfile
if [[ $qpreq = *!B* ]];then
  pr=requirements
  echo "#@ $pr = Feature != \"bigmem\""
elif [[ $qpreq = *B* ]];then
  pr=requirements
  echo "#@ $pr = Feature == \"bigmem\""
fi >>$cfile
if [[ -s /etc/${machine}.cfg ]];then
  export LOADL_CONFIG=/etc/${machine}.cfg
elif [[ -s /etc/${machine}machine.cfg ]];then
  export LOADL_CONFIG=/etc/${machine}machine.cfg
elif [[ -n ${machine} ]];then
  pr=requirements
  [[ $machine = s* ]]&&export LOADL_CONFIG=/etc/snow.cfg
  [[ $machine = f* ]]&&export LOADL_CONFIG=/etc/frost.cfg
  echo "#@ $pr = Machine == \"$machine\""
fi >>$cfile
#if [[ $queue = dev || $queue = prod ]];then
#  pr=requirements
#  echo "#@ $pr = Feature == \"$queue\""
#fi >>$cfile
if [[ -n $when ]];then
  whena=$when
  if [[ $when = +* ]];then
    hr=$(echo $when|cut -c2-3)
    mn=$(echo $when|cut -c4-5)
    [[ -n $mn ]] || mn=00
    now=$(date -u +"%Y%m%d%H%M")
    ((mn+=$(echo $now|cut -c11-12)))
    [[ $mn -ge 60 ]] && ((hr+=1)) && ((mn-=60))
    [[ $mn -lt 10 ]] && mn=0$mn
    whena=$(/nwprod/util/exec/ndate +$hr $(echo $now|cut -c1-10))$mn
  elif [[ $when = t* ]];then
    hr=$(echo $when|cut -c2-3)
    mn=$(echo $when|cut -c4-5)
    [[ -n $mn ]] || mn=00
    now=$(date -u +"%Y%m%d")
    whena=$now$hr$mn
  elif [[ $when = T* ]];then
    hr=$(echo $when|cut -c2-3)
    mn=$(echo $when|cut -c4-5)
    [[ -n $mn ]] || mn=00
    now=$(date -u +"%Y%m%d%H")
    whena=$(/nwprod/util/exec/ndate +24 $now|cut -c1-8)$hr$mn
  fi
  yr=$(echo $whena|cut -c1-4)
  mo=$(echo $whena|cut -c5-6)
  dy=$(echo $whena|cut -c7-8)
  hr=$(echo $whena|cut -c9-10)
  mn=$(echo $whena|cut -c11-12)
  [[ -n $mn ]] || mn=00
  echo "#@ startdate = $mo/$dy/$yr $hr:$mn"
fi >>$cfile


rcpu=${rcpu:-1}
((rcore=$rcpu/2))
# check to see whether $rcpu is an even number
((mod=$rcpu % 2))              
if [[ $mod -eq 1 ]]; then
       ((rcore=$rcpu/2 + 1))
fi         
#echo $mod
#echo $rcore
if [[ $nodes != Bunlimited && $procs -gt 0 ]]; then
        ((tasks=$procs/$nodes))
        ((nodemod=$procs % $nodes))
        if [[ $nodemod -ne 0 ]]; then 
                ((tasks+=1))
        fi
fi

#if [[ $sh = shared ]];then
#  echo "#@ resources = ConsumableMemory($rmem MB) ConsumableCpus($rcpu)" >>$cfile
   echo "#@ node_resources = ConsumableMemory($rmem GB)" >>$cfile
#   if [[ $rcpu -gt 1 ]];then
#      echo "#@ parallel_threads = $rcpu" >>$cfile
#   fi
#   if [[ $procs -eq 0 ]]; then
#         echo "#@ task_affinity = cpu(1)" >>$cfile
#   else
#    if [[ $nodes = Bunlimited ]]; then
#         echo "#@ task_affinity = core($rcore)" >>$cfile
#    else
#         if [[ $tasks -le 32 ]]; then
#            echo "#@ task_affinity = core($rcore)" >>$cfile
#         else
#            echo "#@ task_affinity = cpu($rcpu)" >>$cfile        
#         fi
#    fi
#   fi
#fi

#if [[ $sh = not_shared ]];then
#  echo "#@ node_resources = ConsumableMemory(106GB)" >>$cfile
#  if [[ $rcpu -eq 1 ]]; then
#     if [[ $tasks -le 32 ]];then
        echo "#@ task_affinity = core(1)" >> $cfile
#      else
#        echo "#@ task_affinity = cpu(1)" >> $cfile
#     fi
# else                                                                         
#     if [[ $ppreq != *Tgt* ]];then
#       echo "#@ task_affinity = core($rcore)" >>$cfile
       echo "#@ parallel_threads = $rcpu" >>$cfile
#     else
#       echo "#@ task_affinity = cpu(1)" >>$cfile
#     fi
# fi
# echo "#@ resources = ConsumableCpus($rcpu)" >>$cfile
#fi


if [[ -n $timew ]];then
  echo "#@ wall_clock_limit = $timew"
fi >>$cfile
if [[ -n $account ]];then
  echo "#@ account_no = $account"
fi >>$cfile
if [[ -n $dirin ]];then
  echo "#@ initialdir = $dirin"
fi >>$cfile
if [[ -n $envars ]];then
  echo "#@ environment = $(echo $envars|sed 's/^/$/;s/ /,/g;s/,/;$/g')"
fi >>$cfile
if [[ -n $group ]];then
  echo "#@ group = $group"
fi >>$cfile
#echo "#@ executable = $exec" >>$cfile
if [[ -n $args ]];then
  echo "#@ arguments = $args"
fi >>$cfile
#echo "#@ output = $output" >>$cfile
echo "#@ error = $output" >>$cfile
echo "#@ startdate = 09/27/06 05:00" >>$cfile
echo "#@ notification = error" >>$cfile
echo "#@ restart = no" >>$cfile
if [[ $stdin = YES ]];then
  cat
fi >>$cfile
echo "#@ queue" >>$cfile
if [[ $binding = YES ]];then
        echo "export TARGET_CPU_LIST=-1" >>$cfile
        echo "poe /usrx/local/mpi_trace/utils/launch.x $exec" >>$cfile
fi
if [[ $nosub = YES ]];then
  cat $cfile
  exit
elif [[ $verbose = YES ]];then
  set -x
  cat $cfile
fi
echo "" >>$cfile
echo ". "$(awk '{ print $1 }' regression_var.out)  >>$cfile
echo "" >>$cfile
echo "# Set environment variables for NCEP IBM" >>$cfile
echo "export MEMORY_AFFINITY=MCM" >>$cfile
echo "export MP_SHARED_MEMORY=yes" >>$cfile
echo "" >>$cfile
echo "# Set environment variables for threading and stacksize" >>$cfile
echo "export AIXTHREAD_SCOPE=S" >>$cfile
echo "export XLSMPOPTS="parthds=${rcpu}:stack=128000000"" >>$cfile
echo "" >>$cfile
echo "# Recommended MPI environment variable setttings from IBM" >>$cfile
echo "# (Appendix E, HPC Clusters Using InfiniBand on IBM Power Systems Servers)" >>$cfile
echo "export LAPI_DEBUG_ENABLE_AFFINITY=YES" >>$cfile
echo "export MP_FIFO_MTU=4K" >>$cfile
echo "export MP_SYNC_QP=YES" >>$cfile
echo "export MP_SHM_ATTACH_THRESH=500000 # default is better sometimes" >>$cfile
echo "export MP_EUIDEVELOP=min" >>$cfile
echo "export MP_USE_BULK_XFER=yes" >>$cfile
echo "export MP_BULK_MIN_MSG_SIZE=64k" >>$cfile
echo "export MP_RC_MAX_QP=8192" >>$cfile
echo "export LAPI_DEBUG_RC_DREG_THRESHOLD=1000000" >>$cfile
echo "export LAPI_DEBUG_QP_NOTIFICATION=no" >>$cfile
echo "export LAPI_DEBUG_RC_INIT_SETUP=yes" >>$cfile
echo "" >>$cfile
echo "# Set environment variables for user preferences" >>$cfile
echo "export XLFRTEOPTS="nlwidth=80"" >>$cfile
echo "export MP_LABELIO=yes" >>$cfile
echo "export MP_INFOLEVEL=1" >>$cfile

cat $exec >> $cfile

ofile=$DATA/subout$$
>$ofile
chmod 777 $ofile
#if [[ $userid = "" && $(hostname|cut -c1-5) = nco[12]n ]];then
user=$(echo $userid@|cut -d@ -f1)
user=${user:-$myuser}
host=$(echo $userid@|cut -d@ -f2)
host=${host:-$myhost}
if [[ $host = prod || $host = dev ]];then
  machine=$host
  host=$myhost
fi
if [[ $user = $myuser && $host = $myhost ]];then
  llsubmit $cfile >$ofile
  rc=$?
else
  envs=""
  if [[ -n $envars ]];then
    for v in $(echo $envars|tr , ' ');do eval envs=\"$envs $v=\$$v\";done
  fi
  [[ -n $TZ ]]&&envs="$envs TZ=$TZ"
  [[ -n $LOADL_CONFIG ]]&&envs="$envs LOADL_CONFIG=$LOADL_CONFIG"
  rc=$(cat $cfile|rsh $host -l $user "env $envs llsubmit - >&2;echo \$?" 2>$ofile||echo 18)
fi
cat $ofile
if [[ -w $SUBLOG ]];then
  jobn=$(grep -i submitted $ofile|head -n1|cut -d\" -f2)
  date -u +"%Y%m%d%H%M%S : $subcmd : $jobn" >>$SUBLOG
fi
rm $cfile $ofile
[[ $MKDATA = YES ]] && rmdir $DATA
exit $rc
