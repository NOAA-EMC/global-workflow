pipeline {
    agent none

    stages {
        parallel {
            // The matrix directive would only be available
            // in parallel blocks and is used to generate stages in
            // a declarative fashion
            matrix {
                // Options define a map of options we could potentially have,
                // each map defines a matrix for each individual stage
                opts: [
                    [machine: 'emc-orion'],
                    [machine: 'emc-hera'],
                ]
            }

            // To access variables defined in our opts we can use the groovy
            // standard `it`
            stage("${it.machine} Building & Testing") {
                agent { label "${it.machine}" }
                stage("Build") {
                    steps {
                        sh("echo Build on ${it.machine}")
                    }
                }
                stage("Run tests") {
                    steps {
                        sh("Running Test One  on ${it.machine}")
                    }
                    steps {
                        sh("Running Test Two on ${it.machine}")
                    }
                }
            }    
        }
    }
}