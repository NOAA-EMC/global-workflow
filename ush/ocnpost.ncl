;------------------------------------------------------------------
; Denise.Worthen@noaa.gov (Feb 2019)
;
; This script will remap MOM6 ocean output on the tripole grid to 
; a set of rectilinear grids using pre-computed ESMF weights to remap 
; the listed fields to the destination grid and write the results 
; to a new netCDF file
;
; Prior to running this script, files containing the conservative 
; and bilinear regridding weights must be generated. These weights
; are created using the generate_iceocnpost_weights.ncl script.
;
; Note: the descriptive text below assumes fortran type indexing
; where the variables are indexed as (i,j) and indices start at 1
; NCL indices are (j,i) and start at 0
;
; The post involves these steps
;
;  a) unstaggering velocity points
;     MOM6 is on an Arakawa C grid. MOM6 refers to these 
;     locations as "Ct" for the centers and "Cu", "Cv" 
;     "Bu" for the left-right, north-south and corner 
;     points, respectively.
;
;     The indexing scheme in MOM6 is as follows:  
;
;        Cv@i,j
;     ----X------X Bu@i,j
;                |
;                |
;       Ct@i,j    |
;         X      X Cu@i,j
;                |
;                |
;                |
;
;     CICE5 is on an Arakawa B grid. CICE5 refers to these
;     locations as TLAT,TLON for the centers and ULAT,ULON
;     for the corners
;  
;     In UFS, the CICE5 grid has been created using the MOM6
;     supergrid file. Therefore, all grid points are consistent
;     between the two models. 
;   
;     In the following, MOM6's nomenclature will be followed,
;     so that CICE5's U-grid will be referred to as "Bu".
;
;  b) rotation of tripole vectors to East-West
;     MOM6 and CICE6 both output velocties on their native
;     velocity points. For MOM6, that is u-velocities on the
;     Cu grid and v-velocites on the Cv grid. For CICE5, it is
;     both u and v-velocities on the Bu grid.
;   
;     The rotation angle for both models are defined at center
;     grid points; therefore the velocities need to be first 
;     unstaggered before rotation. MOM6 and CICE5 also define 
;     opposite directions for the rotations. Finally, while the
;     grid points are identical between the two models, CICE5 
;     calculates the rotation angle at center grid points by 
;     averaging the four surrounding B grid points. MOM6 derives
;     the rotation angle at the center directly from the latitude
;     and longitude of the center grid points. The angles are therefor
;     not identical between the two grids.
; 
; c) conservative regridding of some fields
;    Fields such as ice concentration or fluxes which inherently
;    area area-weighted require conservative regridding. Most other
;    variables are state variables and can be regridded using
;    bilinear weighting.
;
; An efficient way to accomplish the unstaggering of velocities 
; is to use the bilinear interpolation weights between grid 
; points of the Arakawa C grid and the center grid points (for example 
; Cu->Ct). These weights are generated by the weight generation script 
;
; Remapping from the tripole to rectilinear uses either the bilinear
; or conservative weights from the weight generation script.  Bilinear weights 
; generated for the first vertical level can be used on other levels
; (where the masking changes) by utilizing the correct masking procedure.
; Set output_masks to true to examine the interpolation masks.
; 
; Intermediate file output can easily be generated for debugging by 
; follwing the example in the output_masks logical
;
; Bin.Li@noaa.gov (May 2019)
; The scripts is revised for use in the coupled workflow.
;
  load "$NCARG_ROOT/lib/ncarg/nclscripts/esmf/ESMF_regridding.ncl"

;----------------------------------------------------------------------
begin
; <BL.
; pull from environment
  COMDIR          = getenv("COMOUT")
  IDATE           = getenv("IDATE")
  FHR2             = getenv("FHR")
  FHR=FHR2
  ENSMEM          = getenv("ENSMEM")
  DATA_TMP        = getenv("DATA")
  nemsrc          = getenv("OCNFIXDIR")
;  nemsrc     = "/scratch2/NCEPDEV/climate/Bin.Li/S2S/fix/ocean_ice_post/FIXDIR/"

; calculate and break apart verification date
  VDATE = tochar(systemfunc("$NDATE "+FHR+" "+IDATE))
;  YYYY  = tostring(VDATE(0:3))
;  MM    = tostring(VDATE(4:5))
;  DD    = tostring(VDATE(6:7))
;  HH    = tostring(VDATE(8:9))
;  HHS   = tostring(tointeger(HH)*3600)
; BL.>

   ; warnings (generated by int2p_n_Wrap) can be supressed by
   ; the following (comment out to get the warnings)
   err = NhlGetErrorObjectId()
   setvalues err
;    "errLevel" : "Fatal"          ; only report Fatal errors
    "errLevel" : "Verbose"
   end setvalues

   output_masks = False

   ; specify a location to use
   ;    nemsrc     = "/scratch4/NCEPDEV/ocean/save/Denise.Worthen/NEMS_INPUT0.1/ocnicepost/"
   ; interpolation methods
   methods        = (/"bilinear" ,"conserve"/)
   ; ocean model output location 
   ;dirsrc = "/scratch3/NCEPDEV/stmp2/Denise.Worthen/BM1_ocn/"

   ; destination grid sizes and name
      dsttype     = (/"rect."/)
      ;dstgrds     = (/"1p0", "0p5", "0p25"/)
      ;dstgrds     = (/"0p5"/)
      dstgrds     = (/"0p25"/)

   ; variables to be regridded with the native tripole stagger location
   ; and dimensionality 
   ; first BM contained only field "mld", which was actually ePBL
   ; the remaining BMs contain ePBL, MLD_003 and MLD_0125 
   ; the following NCO command will be issued at the end 
   ; to rename the variable mld to ePBL if the variable mld is found
   ; ncocmd = "ncrename -O -v mld,ePBL "
   ncocmd = "ncrename -O -v MLD_003,mld"

   varlist = (/ (/      "SSH", "Ct", "bilinear", "2"/) \
               ,(/      "SST", "Ct", "bilinear", "2"/) \
               ,(/      "SSS", "Ct", "bilinear", "2"/) \
               ,(/    "speed", "Ct", "bilinear", "2"/) \
               ,(/     "temp", "Ct", "bilinear", "3"/) \
               ,(/       "so", "Ct", "bilinear", "3"/) \
               ,(/   "latent", "Ct", "conserve", "2"/) \
               ,(/ "sensible", "Ct", "conserve", "2"/) \
               ,(/       "SW", "Ct", "conserve", "2"/) \
               ,(/       "LW", "Ct", "conserve", "2"/) \
               ,(/     "evap", "Ct", "conserve", "2"/) \
               ,(/    "lprec", "Ct", "conserve", "2"/) \
               ,(/    "fprec", "Ct", "conserve", "2"/) \
               ,(/"LwLatSens", "Ct", "conserve", "2"/) \
               ,(/ "Heat_PmE", "Ct", "conserve", "2"/) \
;               ,(/      "mld", "Ct", "bilinear", "2"/) \
               ,(/     "ePBL", "Ct", "bilinear", "2"/) \
               ,(/  "MLD_003", "Ct", "bilinear", "2"/) \
               ,(/ "MLD_0125", "Ct", "bilinear", "2"/) \
             /)
     dims = dimsizes(varlist)
    nvars = dims(0)
   delete(dims)
   ;print(varlist)

   ; vectors to be regridded with the native tripole stagger location
   ; and dimensionality 
   ; note: vectors are always unstaggered using bilinear weights, but can
   ; be remapped using conservative
   nvpairs = 3
   veclist = new( (/nvpairs,4,2/),"string")
   veclist = (/ (/ (/  "SSU",   "SSV"/), (/"Cu", "Cv"/), (/"bilinear", "bilinear"/), (/"2", "2"/) /) \
              , (/ (/   "uo",    "vo"/), (/"Cu", "Cv"/), (/"bilinear", "bilinear"/), (/"3", "3"/) /) \
              , (/ (/ "taux",  "tauy"/), (/"Cu", "Cv"/), (/"conserve", "conserve"/), (/"2", "2"/) /) \
             /)
   ;print(veclist)

   begTime = get_cpu_time()
;----------------------------------------------------------------------
; make a list of the directories and files from the run 
;----------------------------------------------------------------------

;   idate = "20120101"

;   ocnfilelist = systemfunc("ls "+dirsrc+"gfs."+idate+"/00/"+"ocn*.nc")
;          ocnf = addfiles(ocnfilelist,"r")
;        nfiles = dimsizes(ocnfilelist)
; <BL.
; specify input file name and input directory
   ocnfilelist = "ocn"+VDATE+"."+ENSMEM+"."+IDATE+".nc"
   ocnf = addfiles(COMDIR+"/"+ocnfilelist,"r")
   infile = ocnfilelist
; BL.>

  ; get the rotation angles and vertical grid from the first file
  ; two different name were used for the angles, either sinrot,cosrot 
  ; or sin_rot,cos_rot
   if(isfilevar(ocnf[0],"sin_rot"))then
    sinrot = ocnf[0]->sin_rot
   else
    sinrot = ocnf[0]->sinrot
   end if
   if(isfilevar(ocnf[0],"cos_rot"))then
    cosrot = ocnf[0]->cos_rot
   else
    cosrot = ocnf[0]->cosrot
   end if
       z_l = ocnf[0]->z_l
       z_i = ocnf[0]->z_i
     nlevs = dimsizes(z_l)

  ; get a 2 and 3 dimensional fields for creating the interpolation masks
  ; the mask2d,mask3d contain 1's on land and 0's at valid points.
  mask2d = where(ismissing(ocnf[0]->SST),  1.0, 0.0)
  mask3d = where(ismissing(ocnf[0]->temp), 1.0, 0.0)
  ;printVarSummary(mask2d)
  ;printVarSummary(mask3d)

  ; create conformed rotation arrays to make vector rotations cleaner
  sinrot2d=conform_dims(dimsizes(mask2d),sinrot,(/1,2/)) 
  cosrot2d=conform_dims(dimsizes(mask2d),cosrot,(/1,2/)) 

  sinrot3d=conform_dims(dimsizes(mask3d),sinrot,(/2,3/)) 
  cosrot3d=conform_dims(dimsizes(mask3d),cosrot,(/2,3/)) 

  ; check for variables in file. this is only required because
  ; of the missing/misnamed MLD variables in the first BM
  ; only the varlist is checked, since it is assumed there are
  ; no other variables missing after the first benchmark
  valid = new((/nvars/),"logical")
  valid = False
  do nv = 0,nvars-1
   varname = varlist(nv,0)
   if(isfilevar(ocnf[0],varname))then
    valid(nv) = True
   end if
  print(varlist(nv,0)+"   "+valid(nv))
  end do

;----------------------------------------------------------------------
; loop over the output resolutions 
;----------------------------------------------------------------------

      jj = 1
      ii = 0

   do jj = 0,dimsizes(dstgrds)-1
   ;outres = "_"+dstgrds(jj)+"x"+dstgrds(jj)
   outres = dstgrds(jj)+"x"+dstgrds(jj)
   outgrid = dstgrds(jj)

   ; regrid a field to obtain the output xy dimensions
    wgtsfile = nemsrc+"/"+"tripole.mx025.Ct.to."+dsttype+dstgrds(jj)+".bilinear.nc"
          tt = ESMF_regrid_with_weights(sinrot,wgtsfile,False)
        tt!0 = "lat"
        tt!1 = "lon"
         lat = tt&lat
         lon = tt&lon
        dims = dimsizes(tt)
        nlat = dims(0)
        nlon = dims(1)

     print("fields will be remapped to destination grid size "\
           +nlon+"  "+nlat)
  
     delete(tt)
     delete(dims)

    ; regrid the masks to obtain the interpolation masks. 
    ; the mask2d,mask3d contain 1's on land and 0's at valid points.
    ; when remapped, any mask value > 0 identifies land values that 
    ; have crept into the field. remapped model fields are then
    ; masked with this interpolation mask

    wgtsfile = nemsrc+"/"+"tripole.mx025.Ct.to."+dsttype+dstgrds(jj)+".bilinear.nc"
    rgmask2d = ESMF_regrid_with_weights(mask2d, wgtsfile,False)
    rgmask3d = ESMF_regrid_with_weights(mask3d, wgtsfile,False)

    if(output_masks)then
     testfile = "masks_"+dstgrds(jj)+".nc"
     system("/bin/rm -f "+testfile)
     ; create
     testcdf = addfile(testfile,"c")
     testcdf->rgmask2d = rgmask2d
     testcdf->rgmask3d = rgmask3d
     ; close
     delete(testcdf)
    end if

    ; create the interpolation mask
    rgmask2d = where(rgmask2d .gt. 0.0, rgmask2d@_FillValue, 1.0)
    rgmask3d = where(rgmask3d .gt. 0.0, rgmask3d@_FillValue, 1.0)

    ; conformed depth array 
    depth = conform_dims(dimsizes(mask3d), z_l, (/1/))
    ;print(dimsizes(depth))

;----------------------------------------------------------------------
; loop over each file in the ocnfilelist
;----------------------------------------------------------------------
;<BL.  removing file loop
;   do ii = 0,2
;do ii = 0,nfiles-1
;     infile = ocnfilelist(ii)
;    print("working on "+infile)
; create the output file name
;    outfile = infile
; find the index where the actual filename begins
;  indstr = str_index_of_substr(outfile, "/", -1)
; insert a sub-directory name
;    outfile = str_insert(outfile,outgrid+"/",indstr+1)
; insert a string indicating regridding resolution
;    outfile = str_insert(outfile,outres,-4)
; find the index where the actual filename begins
;     indstr = str_index_of_substr(outfile, "ocn", -1)
; insert an 'r' after the leading occurence of 'ocn' 
; to indicate regular grid
;    outfile = str_insert(outfile,"r",indstr+3)
; check if the outgrid directory exists and create
; it if it does not
;   ret = systemfunc("test -d "+dirsrc+"gfs."+idate+"/00/"+outgrid+"; echo $?")
;    if(ret .eq. 1)then
;     system("mkdir "+dirsrc+"gfs."+idate+"/00/"+outgrid)
;    end if
; BL.>

    ; retrieve the time stamp
       time = ocnf[0]->time
    delete(time@bounds)

;----------------------------------------------------------------------
; set up the output netcdf file
;----------------------------------------------------------------------
;    system("/bin/rm -f " + outfile)    ; remove if exists
;    outcdf  = addfile (outfile, "c")  ; open output file
; specify output file information and open file for output
  FILENAME_REGRID = DATA_TMP+"/ocnr"+VDATE+"."+ENSMEM+"."+IDATE+"_"+outres+"_MOM6.nc"
  if (isfilepresent(FILENAME_REGRID)) then
    system("rm -f "+FILENAME_REGRID)
  end if
  outcdf = addfile(FILENAME_REGRID,"c")
  outfile=FILENAME_REGRID

    ; explicitly declare file definition mode. Improve efficiency.
    setfileoption(outcdf,"DefineMode",True)

    ; create global attributes of the file
    fAtt               = True            ; assign file attributes
    fAtt@creation_date = systemfunc ("date")
    fAtt@source_file   = infile        
    fileattdef( outcdf, fAtt )           ; copy file attributes    

    ; predefine the coordinate variables and their dimensionality
   ; dimNames = (/"time", "z_l",   "z_i",  "z_T",  "lat", "lon"/)  
    dimNames = (/"time", "z_l",   "z_i",   "lat", "lon"/)  
    ;dimSizes = (/ -1   , nlevs, nlevs+1,    nTd,   nlat,  nlon/) 
    dimSizes = (/ -1   , nlevs, nlevs+1,    nlat,  nlon/) 
    ;dimUnlim = (/ True , False,   False,  False,  False, False/)   
    dimUnlim = (/ True , False,   False,  False, False/)   
    filedimdef(outcdf,dimNames,dimSizes,dimUnlim)

    ; predefine the the dimensionality of the variables to be written out
    filevardef(outcdf,  "time", typeof(time), getvardims(time)) 
    filevardef(outcdf,   "z_l",  typeof(z_l),  getvardims(z_l))                           
    filevardef(outcdf,   "z_i",  typeof(z_i),  getvardims(z_i))
    ;filevardef(outcdf,   "z_T",  typeof(z_T),  getvardims(z_T))
    filevardef(outcdf,   "lat",  typeof(lat),  getvardims(lat))                          
    filevardef(outcdf,   "lon",  typeof(lon),  getvardims(lon))                          

    ; Copy attributes associated with each variable to the file
    filevarattdef(outcdf, "time", time)                 
    filevarattdef(outcdf,  "z_l",  z_l)               
    filevarattdef(outcdf,  "z_i",  z_i)               
    ;filevarattdef(outcdf,  "z_T",  z_T)               
    filevarattdef(outcdf,  "lat",  lat)             
    filevarattdef(outcdf,  "lon",  lon)            

    ; predefine variables
    do nv = 0,nvars-1
     varname = varlist(nv,0)
     vardims = varlist(nv,3)
     if(valid(nv))then
      if(vardims .eq. "2")then
       odims = (/"time", "lat", "lon"/)
      else
       odims = (/"time", "z_l", "lat", "lon"/)
      end if
      ;print("creating variable "+varname+" in file")
      filevardef(outcdf, varname, "float", odims)
      delete(odims)
     end if
    end do

    do nv = 0,nvpairs-1
     do nn = 0,1
     vecname = veclist(nv,0,nn)
     vecdims = veclist(nv,3,nn)
     if(vecdims .eq. "2")then
      odims = (/"time", "lat", "lon"/)
     else
      odims = (/"time", "z_l", "lat", "lon"/)
     end if
     ;print("creating variable "+vecname+" in file")
     filevardef(outcdf, vecname, "float", odims) 
     delete(odims)
     delete(vecdims)
     end do
    end do
 
    ; explicitly exit file definition mode.
    setfileoption(outcdf,"DefineMode",False)

    ; write the dimensions to the file
    outcdf->time   = (/time/)     
    outcdf->z_l    = (/z_l/)     
    outcdf->z_i    = (/z_i/)     
;    outcdf->z_T    = (/z_T/)     
; <BL
    lat=lat(::-1)
; BL>
    outcdf->lat    = (/lat/)
    outcdf->lon    = (/lon/) 

;----------------------------------------------------------------------
; loop over nvars variables
;----------------------------------------------------------------------

    do nv = 0,nvars-1
     varname = varlist(nv,0)
     vargrid = varlist(nv,1)
     varmeth = varlist(nv,2)
     vardims = varlist(nv,3)
  
     if(valid(nv))then
      ;print(nv+"   "+varname+"  "+vargrid+"  "+varmeth)
      ocnvar = ocnf[ii]->$varname$
     ndims = dimsizes(dimsizes(ocnvar))
     ;print(ndims+"   "+dimsizes(ocnvar))

     if(vargrid .ne. "Ct")then
      ; print error if the variable is not on the Ct grid
      print("Variable is not on Ct grid")
      exit
     end if

     ; regrid to dsttype+dstgrd with method
     ;print("remapping "+varname+" to grid "+dsttype+dstgrds(jj))
     wgtsfile = nemsrc+"/"+"tripole.mx025.Ct.to."+dsttype+dstgrds(jj)+"."+varmeth+".nc"

     rgtt = ESMF_regrid_with_weights(ocnvar,wgtsfile,False)
    if(vardims .eq. "2")then
     rgtt = where(ismissing(rgmask2d),ocnvar@_FillValue,rgtt)
     rgtt=rgtt(:,::-1,:)
    else
     rgtt = where(ismissing(rgmask3d),ocnvar@_FillValue,rgtt)
     rgtt=rgtt(:,:,::-1,:)
    end if

     ; enter file definition mode to add variable attributes
     setfileoption(outcdf,"DefineMode",True)
     filevarattdef(outcdf, varname, rgtt)                 
     setfileoption(outcdf,"DefineMode",False)

     outcdf->$varname$   = (/rgtt/)

     delete(ocnvar)
     delete(rgtt)
 
     ; variable exists    
     end if
    ; nv, loop over number of variables
    end do

;----------------------------------------------------------------------
;
;----------------------------------------------------------------------
   
   ;nv = 2
   do nv = 0,nvpairs-1
     vecnames = veclist(nv,0,:)
     vecgrids = veclist(nv,1,:)
     vecmeth  = veclist(nv,2,:)
     vecdims  = veclist(nv,3,:)
     ;print(nv+"   "+vecnames+"  "+vecgrids+"  "+vecmeth)

     ; create a vector pair list
     vecpairs = NewList("fifo")
            n = 0
         uvel = ocnf[ii]->$vecnames(n)$
       vecfld = where(ismissing(uvel),0.0,uvel)
        copy_VarAtts(uvel,vecfld)
     ;print("unstagger "+vecnames(n)+" from "+vecgrids(n)+" to Ct")
     wgtsfile = nemsrc+"/"+"tripole.mx025."+vecgrids(n)+".to.Ct.bilinear.nc"
           ut = ESMF_regrid_with_weights(vecfld,wgtsfile,False)
     delete(ut@remap)

            n = 1
         vvel = ocnf[ii]->$vecnames(n)$
       vecfld = where(ismissing(vvel),0.0,vvel)
        copy_VarAtts(vvel,vecfld)
     ;print("unstagger "+vecnames(n)+" from "+vecgrids(n)+" to Ct")
     wgtsfile = nemsrc+"/"+"tripole.mx025."+vecgrids(n)+".to.Ct.bilinear.nc"
           vt = ESMF_regrid_with_weights(vecfld,wgtsfile,False)
     delete(vt@remap)

     ListAppend(vecpairs,ut)
     ListAppend(vecpairs,vt)
     ;print(vecpairs)

     ; rotate
     ; first copy Metadata
     urot = vecpairs[0]
     vrot = vecpairs[1]
     if(vecdims(0) .eq. "2")then
       urot =   ut*cosrot2d +   vt*sinrot2d
       vrot =   vt*cosrot2d -   ut*sinrot2d
     else
       urot =   ut*cosrot3d +   vt*sinrot3d
       vrot =   vt*cosrot3d -   ut*sinrot3d
     end if
     ; change attribute to indicate these are now rotated velocities
     urot@long_name=str_sub_str(urot@long_name,"X","Zonal")
     vrot@long_name=str_sub_str(vrot@long_name,"Y","Meridional")
     ; copy back
     vecpairs[0] = urot
     vecpairs[1] = vrot
     delete([/urot, vrot/])

     ; remap
     do n = 0,1
      vecfld = vecpairs[n]
      ; regrid to dsttype+dstgrd with method
      ;print("remapping "+vecnames(n)+" to grid "+dsttype+dstgrds(jj))
      wgtsfile = nemsrc+"/"+"tripole.mx025.Ct.to."+dsttype+dstgrds(jj)+"."+vecmeth(n)+".nc"

       rgtt = ESMF_regrid_with_weights(vecfld,wgtsfile,False)
      if(vecdims(n) .eq. "2")then
       rgtt = where(ismissing(rgmask2d),vecfld@_FillValue,rgtt)
     rgtt=rgtt(:,::-1,:)
      else
       rgtt = where(ismissing(rgmask3d),vecfld@_FillValue,rgtt)
     rgtt=rgtt(:,:,::-1,:)
      end if

      ; enter file definition mode to add variable attributes
      setfileoption(outcdf,"DefineMode",True)
      filevarattdef(outcdf, vecnames(n), rgtt)                 
      setfileoption(outcdf,"DefineMode",False)
    
      outcdf->$vecnames(n)$   = (/rgtt/)
      delete(rgtt)
     end do
      delete([/uvel,vvel,ut,vt,vecfld,vecpairs/])
      delete([/vecnames,vecgrids,vecmeth,vecdims/])
    ; nv, loop over number of vector pairs
    end do
  
;----------------------------------------------------------------------
; close the outcdf and continue through filelist
;----------------------------------------------------------------------
   
   delete(outcdf)
   ; rename mld to ePBL if required
  do nv = 0,nvars-1
   varname = varlist(nv,0)
  ;  if(varname .eq. "mld" .and. valid(nv))then
    if(varname .eq. "MLD_003" .and. valid(nv))then
     print("Renaming MLD_003 to mld")
     ;print(ncocmd+"  "+outfile)
     system(ncocmd+"  "+outfile)
    end if
   end do

   ; ii, loop over files
;<BL.
   ;end do
;BL.>
   ;jj, loop over destination grids
   delete([/lat,lon,nlon,nlat/])
   delete([/rgmask2d,rgmask3d/])
  end do
  print("One complete ocn file in " + (get_cpu_time() - begTime) + " seconds")
exit
end
