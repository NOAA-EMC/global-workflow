# This file is used to generate config.base, which the shell scripts
# process before any other files.  The config.base sets global
# variables and default values that are needed throughout the
# scripting system.

config_base:
  filename: config.base
  content: !expand |
    #!/bin/ksh -x
    
    # This file is automatically generated from the YAML-based system
    # in ecf/ecfutils/.  Any changes will be overwritten if
    # setup_case.sh is rerun.
    
    ########## config.base ##########
    # Common to all steps
    
    echo "BEGIN: config.base"

    # Machine environment
    export machine="{doc.platform.name}"

    export cpl="{doc.settings.cpl}"
    export cplflx="{doc.settings.cplflx}"
    export cplice="{doc.settings.cplice}"
    export print_esmf="{doc.settings.print_esmf}"

    export nems_temp="{doc.settings.nems_temp}"
    export nems_temp_cold="{doc.settings.nems_temp_cold}"
               
    # EMC parallel or NCO production
    export RUN_ENVIR="emc"
    
    # Account, queue, etc.
    export ACCOUNT="{doc.accounting.cpu_project}"     # This comes from user.yaml
    export QUEUE="{doc.accounting.exclusive_partition.exclusive_queue}"
    export QUEUE_ARCH="{doc.accounting.service_partition.service_queue}"
        
    # Project to use in mass store:
    export HPSS_PROJECT={doc.accounting.hpss_project}
    
    # Directories relative to installation areas:
    export HOMEgfs="{doc.places.HOMEgfs}"
    export PARMgfs=$HOMEgfs/parm
    export FIXgfs=$HOMEgfs/fix
    export USHgfs=$HOMEgfs/ush
    export UTILgfs=$HOMEgfs/util
    export EXECgfs=$HOMEgfs/exec
    export SCRgfs=$HOMEgfs/scripts

    export FIXcice=$HOMEgfs/fix/fix_cice5
    export FIXmom=$HOMEgfs/fix/fix_mom6
    export FIXgrid=$HOMEgfs/fix/fix_fv3grid
    export OCNFIXDIR=$HOMEgfs/fix/fix_ocnice

    # GLOBAL static environment parameters
    export DMPDIR="{doc.places.DMPDIR}"
    export RTMFIX="{doc.places.RTMFIX}"
    
    export HOMEDIR="{doc.places.HOMEgfs}"
    export STMP="{doc.places.DATAROOT}"
    export PTMP="{doc.places.COMROOT}"
    export NOSCRUB="{doc.places.NOSCRUB}"
    
    # Base directories for various builds
    export BASE_GIT="{doc.platform.BASE_GIT}"
    export BASE_SVN="{doc.platform.BASE_SVN}"
    
    # Utilities needed in the scripts (mostly post)
    {doc.platform.config_base_extras}
    export POSTGRB2TBL="{doc.places.HOMEgfs}/sorc/gfs_post.fd/parm/params_grib2_tbl_new"

    # CCPP Configurations
    export CCPP_SUITE="{doc.fv3_gfs_settings.CCPP_SUITE}"

    # Toggle to turn on/off GFS downstream processing.
    export DO_BUFRSND="{tools.YES_NO(doc.downstream.DO_BUFRSND)}" # Run GFS_POSTSND
    export DO_GEMPAK="{tools.YES_NO(doc.downstream.DO_GEMPAK)}"  # Run GFS GEMPAK
    export DO_AWIPS="{tools.YES_NO(doc.downstream.DO_AWIPS)}"   # Run GFS AWIPS

    export REALTIME="{tools.YES_NO(doc.settings.realtime)}"
    
    ####################################################
    # DO NOT ADD MACHINE DEPENDENT STUFF BELOW THIS LINE
    # IF YOU HAVE TO MAKE MACHINE SPECIFIC CHANGES BELOW
    # FEEL FREE TO MOVE THEM ABOVE THIS LINE TO KEEP IT
    # CLEAR
    ####################################################
    # Build paths relative to $HOMEgfs
    export HOMEgsi="$HOMEgfs"
    export FIXgsi="{doc.places.get('FIXgsi','$HOMEgfs/fix/fix_gsi')}"
    export HOMEfv3gfs="{doc.places.get('HOMEfv3gfs','$HOMEgfs/sorc/fv3gfs.fd')}"
    export HOMEpost="{doc.places.get('HOMEpost','$HOMEgfs')}"
    export HOMEobsproc_prep="{doc.places.get('HOMEobsproc_prep', '$BASE_GIT/obsproc/obsproc_prep_RB-5.2.0')}"
    export HOMEobsproc_network="{doc.places.get('HOMEobsproc_network', '$BASE_GIT/obsproc/obsproc_global_RB-3.2.0')}"
    export BASE_VERIF="{doc.places.get('BASE_VERIF', '$BASE_SVN/verif/global/tags/vsdb')}"
    
    # CONVENIENT utility scripts and other environment parameters
    export NCP="/bin/cp -p"
    export NMV="/bin/mv"
    export NLN="/bin/ln -sf"
    export VERBOSE="YES"
    export KEEPDATA="{doc.settings.KEEPDATA}"
    export CHGRP_CMD="{doc.platform.CHGRP_RSTPROD_COMMAND}"
    export NEMSIOGET="$HOMEgfs/exec/nemsio_get"

    # For coupled
    export UGCSsrc="/scratch2/NCEPDEV/climate/Bin.Li/S2S/fix/ocean_ice_post"
 
    # Machine environment, jobs, and other utility scripts
    export BASE_ENV="$HOMEgfs/env"
    export BASE_JOB="$HOMEgfs/jobs/rocoto"
    
    # EXPERIMENT specific environment parameters
    export SDATE={tools.to_YMDH(doc.settings.SDATE)}
    export EDATE={tools.to_YMDH(doc.settings.EDATE)}
    export assim_freq={doc.data_assimilation.assim_freq}
    export PSLOT="{doc.names.experiment}"
    export EXPDIR="{doc.places.EXPDIR}"
    export ROTDIR="{doc.places.ROTDIR}"
    export ROTDIR_DUMP="YES"
    export DUMP_SUFFIX="{doc.settings.DUMP_SUFFIX}"
    export RUNDIR="{doc.places.DATAROOT}"
    export ARCDIR="$NOSCRUB/archive/$PSLOT"
    export ICSDIR="{doc.places.ICSDIR}"
    export ATARDIR="{doc.archiving.ATARDIR}"
    
    # Commonly defined parameters in JJOBS
    export envir=${{envir:-"prod"}}
    export NET="gfs"
    export RUN=${{RUN:-${{CDUMP:-"gfs"}}}}
    export jlogfile="${{ROTDIR}}/logs/jlogfile"
    #export ERRSCRIPT=${{ERRSCRIPT:-'eval [[ $err = 0 ]]'}}
    #export LOGSCRIPT=${{LOGSCRIPT:-""}}
    export ERRSCRIPT=${{ERRSCRIPT:-"err_chk"}}
    export LOGSCRIPT=${{LOGSCRIPT:-"startmsg"}}
    export REDOUT="1>"
    export REDERR="2>"
    
    export SENDECF="NO"
    export SENDCOM="NO"
    export SENDDBN="NO"
    export SENDSDM="NO"

    # Adjusting COM paths for non-prod experiments
    #export PDY=`expr $CDATE | cut -c1-8`
    #export GDATE=`$NDATE -06 $CDATE`
    #export PDY_m6hrs=`expr $GDATE | cut -c1-8`
    #export COMINgfs="$COMROOThps/$NET/$envir/$RUN.$PDY"
    #export COMINgfs_m6hrs="$COMROOThps/$NET/$envir/$RUN.$PDY_m6hrs"
    #export COMIN="$ROTDIR/$CDUMP.$PDY/$cyc"
    #export COMOUT="$ROTDIR/$CDUMP.$PDY/$cyc"
    #export COMOUTwmo="$ROTDIR/$CDUMP.$PDY/$cyc/wmo"
    
    # Resolution specific parameters
    export LEVS={doc.fv3_gfs_settings.LEVS}
    export CASE="{doc.fv3_gfs_settings.CASE}"
    export CASE_ENKF="{doc.fv3_enkf_settings.CASE}"
    
    # Surface cycle update frequency
    if [ "$CDUMP" == "gdas" ] ; then
        export FHCYC={doc.fv3_enkf_settings.FHCYC_GDAS}
        export FTSFS=10
    elif [ "$CDUMP" == "gfs" ] ; then
        export FHCYC={doc.fv3_enkf_settings.FHCYC_GFS}
    fi
    
    # Output frequency of the forecast model (for cycling)
    export FHMIN={doc.output_settings.FHMIN_GDAS}
    export FHMAX={doc.output_settings.FHMAX_GDAS}
    export FHOUT={doc.output_settings.FHOUT_GDAS}
    
    # GFS cycle info
    export gfs_cyc={doc.settings.gfs_cyc} # 0: no GFS cycle, 1: 00Z only, 2: 00Z and 12Z only, 4: all 4 cycles.
    
    # GFS output and frequency
    export FHMIN_GFS={doc.output_settings.FHMIN_GFS}
    export FHMAX_GFS={doc.output_settings.FHMAX_GFS}
    export FHOUT_GFS={doc.output_settings.FHOUT_GFS}
    export FHMAX_HF_GFS={doc.output_settings.FHMAX_HF_GFS}
    export FHOUT_HF_GFS={doc.output_settings.FHOUT_HF_GFS}
    export FHRLST="{doc.output_settings.gfs_forecast_hours}"

    # I/O QUILTING, true--use Write Component; false--use GFDL FMS
    # if quilting=true, choose OUTPUT_GRID as cubed_sphere_grid in netcdf or gaussian_grid
    # if gaussian_grid, set OUTPUT_FILE for nemsio or netcdf
    export QUILTING="{tools.fort(doc.fv3_gdas_settings.QUILTING)}"
    export OUTPUT_GRID="{doc.output_settings.OUTPUT_GRID}"
    export OUTPUT_FILE="{doc.output_settings.OUTPUT_FILE_TYPE}"
   
    # Microphysics Options: 99-ZhaoCarr, 8-Thompson; 6-WSM6, 10-MG, 11-GFDL
    export imp_physics={doc.fv3_gfs_settings.imp_physics}
    
    # Shared parameters
    # Hybrid related
    export DOHYBVAR="{tools.YES_NO(doc.data_assimilation.DOHYBVAR)}"
    export NMEM_ENKF={doc.data_assimilation.NMEM_ENKF}
    export SMOOTH_ENKF="{tools.YES_NO(doc.data_assimilation.SMOOTH_ENKF)}"
    export l4densvar="{tools.fort(doc.data_assimilation.l4densvar)}"
    export lwrite4danl="{tools.fort(doc.data_assimilation.lwrite4danl)}"
    
    # EnKF output frequency
    if [ $DOHYBVAR = "YES" ]; then
        export FHMIN_ENKF={doc.output_settings.FHMIN_ENKF}
        export FHMAX_ENKF={doc.output_settings.FHMAX_ENKF}
        export FHOUT_ENKF={doc.output_settings.FHOUT_ENKF}
        if [ $l4densvar = ".true." ]; then
            export FHOUT=1
        fi
    fi
    
    # If YES, NSST is turned on in anal and/or fcst steps
    export DONST="{tools.YES_NO(doc.fv3_gdas_settings.DONST)}"
    if [ $DONST = "YES" ]; then export FNTSFA="        "; fi
    
    # The switch to apply SST elevation correction or not
    export nst_anl={tools.fort(doc.fv3_gfs_settings.nst_anl)}
    
    # Analysis increments to zero in CALCINCEXEC
    export INCREMENTS_TO_ZERO="{tools.join(doc.data_assimilation.INCREMENTS_TO_ZERO,',')}"

    # Archiving options
    export DELETE_COM_IN_ARCHIVE_JOB={tools.YES_NO(doc.archiving.scrub_in_archive)}
    export HPSSARCH={tools.YES_NO(doc.archiving.archive_to_hpss)}   # save data to HPSS archive
    export ARCH_CYC={doc.archiving.arch_cyc:02d}           # Archive data at this cycle for warm_start capability. Cannot be 00
    export ARCH_WARMICFREQ={doc.archiving.arch_warmicfreq}     # Archive frequency in days for warm_start capability
    export ARCH_FCSTICFREQ={doc.archiving.arch_fcsticfreq}     # Archive frequency in days for gdas and gfs forecast-only capability
    
    echo "END: config.base"
    
