#! /usr/bin/env bash

source "${HOMEgfs}/ush/preamble.sh"
source "${HOMEgfs}/ush/jjob_header.sh" -e "stage_ic" -c "base stage_ic"

# Restart conditions for GFS cycle come from GDAS
# shellcheck disable=SC2153
rRUN=${RUN}
# shellcheck disable=SC2153
[[ ${RUN} == "gfs" ]] && rRUN="gdas"

# Define significant cycles
# Locally scoped variables and functions
# shellcheck disable=SC2153
half_window=$(( assim_freq / 2 ))
current_cycle="${PDY}${cyc}"
previous_cycle=$(date --utc -d "${current_cycle:0:8} ${current_cycle:8:2} - ${assim_freq} hours" +%Y%m%d%H)
current_cycle_begin=$(date --utc -d "${current_cycle:0:8} ${current_cycle:8:2} - ${half_window} hours" +%Y%m%d%H)
current_cycle_end=$(date --utc -d "${current_cycle:0:8} ${current_cycle:8:2} + ${half_window} hours" +%Y%m%d%H)
current_cycle_offset=$(date --utc -d "${PDY} ${cyc} + ${OFFSET_START_HOUR} hours" +%Y%m%d%H)

# Define model start date for current_cycle as the time the forecast will start
if [[ "${DOIAU:-NO}" == "YES" ]]; then
  model_start_date_current_cycle="${current_cycle_begin}"
else
  if [[ "${REPLAY_ICS:-NO}" == "YES" ]]; then
    model_start_date_current_cycle=${current_cycle_end}
  else
    model_start_date_current_cycle=${current_cycle}
  fi
fi
export previous_cycle current_cycle_offset model_start_date_current_cycle

# Define MEMDIR_ARRAY
MEMDIR_ARRAY=()
if [[ "${RUN:-}" = "enkfgdas" || "${RUN:-}" = "gefs" ]]; then
  if [[ "${RUN:-}" = "gefs" ]]; then
    ii_start=0
  elif [[ "${RUN:-}" = "enkfgdas" ]]; then
    ii_start=1
  fi
  # Populate the member_dirs array based on the value of NMEM_ENS
  for ((ii = "${ii_start}"; ii <= "${NMEM_ENS:-0}"; ii++)); do
    MEMDIR_ARRAY+=("mem$(printf "%03d" "${ii}")")
  done
else
  MEMDIR_ARRAY+=("")
fi

# Initialize return code
err=0

###############################################################
for MEMDIR in "${MEMDIR_ARRAY[@]}"; do

  # Export MEMDIR; need even if empty
  export MEMDIR

  # Declare COMs
  if [[ "${MODE}" = "cycled" && "${RUN}" = "gdas" ]]; then
    YMD=${current_cycle:0:8} HH=${current_cycle:8:2} declare_from_tmpl COMOUT_ATMOS_ANALYSIS:COM_ATMOS_ANALYSIS_TMPL
    export COMOUT_ATMOS_ANALYSIS
  fi

  if [[ ${EXP_WARM_START:-".false."} = ".true." ]]; then
    RUN=${rRUN} YMD=${previous_cycle:0:8} HH=${previous_cycle:8:2} declare_from_tmpl COMOUT_ATMOS_RESTART_PREV:COM_ATMOS_RESTART_TMPL
    RUN=${rRUN} YMD=${previous_cycle:0:8} HH=${previous_cycle:8:2} declare_from_tmpl COMOUT_MED_RESTART_PREV:COM_MED_RESTART_TMPL
    export COMOUT_ATMOS_RESTART_PREV COMOUT_MED_RESTART_PREV
  else
    YMD=${current_cycle:0:8} HH=${current_cycle:8:2} declare_from_tmpl COMOUT_ATMOS_INPUT:COM_ATMOS_INPUT_TMPL
    export COMOUT_ATMOS_INPUT
  fi
  if [[ "${DO_OCN:-}" = "YES" ]]; then
    RUN=${rRUN} YMD=${previous_cycle:0:8} HH=${previous_cycle:8:2} declare_from_tmpl COMOUT_OCEAN_RESTART_PREV:COM_OCEAN_RESTART_TMPL
    export COMOUT_OCEAN_RESTART_PREV
  fi
  if [[ "${REPLAY_ICS:-NO}" = "YES" ]]; then
    YMD=${current_cycle:0:8} HH=${current_cycle:8:2} declare_from_tmpl COMOUT_OCEAN_ANALYSIS:COM_OCEAN_ANALYSIS_TMPL
    export COMOUT_OCEAN_ANALYSIS
  fi
  if [[ "${DO_ICE:-}" = "YES" ]]; then
    RUN=${rRUN} YMD=${previous_cycle:0:8} HH=${previous_cycle:8:2} declare_from_tmpl COMOUT_ICE_RESTART_PREV:COM_ICE_RESTART_TMPL
    export COMOUT_ICE_RESTART_PREV
  fi
  if [[ "${DO_WAVE:-}" = "YES" ]]; then
    YMD=${previous_cycle:0:8} HH=${previous_cycle:8:2} declare_from_tmpl COMOUT_WAVE_RESTART_PREV:COM_WAVE_RESTART_TMPL
    export COMOUT_WAVE_RESTART_PREV
  fi

  # Execute staging
  "${SCRgfs}/exglobal_stage_ic.py"

done # for MEMDIR in "${MEMDIR_ARRAY[@]}"; do

###############################################################
# Check for errors and exit if any of the above failed
if [[ "${err}" -ne 0 ]]; then
  echo "FATAL ERROR: Unable to copy ICs to ${ROTDIR}; ABORT!"
  exit "${err}"
fi

##########################################
# Remove the Temporary working directory
##########################################
cd "${DATAROOT}" || (echo "${DATAROOT} does not exist. ABORT!"; exit 1)
[[ ${KEEPDATA} = "NO" ]] && rm -rf "${DATA}"

exit 0
