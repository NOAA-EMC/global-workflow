#!/bin/ksh -x

export RUN_ENVIR=${RUN_ENVIR:-"nco"}
export PS4='$SECONDS + '
date


#############################
# Source relevant config files
#############################
export EXPDIR=${EXPDIR:-$HOMEgfs/parm/config}
configs="base arch"
config_path=${EXPDIR:-$NWROOT/gfs.${gfs_ver}/parm/config}
for config in $configs; do
    . $config_path/config.$config
    status=$?
    [[ $status -ne 0 ]] && exit $status
done


##############################################
# Obtain unique process id (pid) and make temp directory
##############################################
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}

export DATA=${DATA:-${DATAROOT}/${jobid:?}}
mkdir -p $DATA
cd $DATA


##############################################
# Run setpdy and initialize PDY variables
##############################################
export cycle="t${cyc}z"
setpdy.sh
. ./PDY


##############################################
# Determine Job Output Name on System
##############################################
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile


##############################################
# Set variables used in the script
##############################################
export CDATE=${CDATE:-${PDY}${cyc}}
export CDUMP=${CDUMP:-${RUN:-"gfs"}}
export COMPONENT=${COMPONENT:-atmos}


##############################################
# Begin JOB SPECIFIC work
##############################################
COMIN_OBS=${COMIN_OBS:-$(compath.py prod/obsproc/${obsproc_ver})/$RUN.$PDY/$cyc/atmos}
COMIN=${COMIN:-$ROTDIR/$RUN.$PDY/$cyc/atmos}
cd $COMIN

# ICS are restarts and always lag INC by $assim_freq hours
ARCHINC_CYC=$ARCH_CYC
ARCHICS_CYC=$((ARCH_CYC-assim_freq))
if [ $ARCHICS_CYC -lt 0 ]; then
    ARCHICS_CYC=$((ARCHICS_CYC+24))
fi

# CURRENT CYCLE
APREFIX="${CDUMP}.t${cyc}z."
ASUFFIX=${ASUFFIX:-$SUFFIX}

if [ $ASUFFIX = ".nc" ]; then
   format="netcdf"
else
   format="nemsio"
fi

###############################################################
# Archive online for verification and diagnostics
###############################################################

COMIN=${COMINatmos:-"$ROTDIR/$CDUMP.$PDY/$cyc/atmos"}
cd $COMIN

[[ ! -d $ARCDIR ]] && mkdir -p $ARCDIR
$NCP ${APREFIX}gsistat $ARCDIR/gsistat.${CDUMP}.${CDATE}
$NCP ${APREFIX}pgrb2.1p00.anl $ARCDIR/pgbanl.${CDUMP}.${CDATE}.grib2

# Archive 1 degree forecast GRIB2 files for verification
if [ $CDUMP = "gfs" ]; then
    fhmax=$FHMAX_GFS
    fhr=0
    while [ $fhr -le $fhmax ]; do
        fhr2=$(printf %02i $fhr)
        fhr3=$(printf %03i $fhr)
        $NCP ${APREFIX}pgrb2.1p00.f$fhr3 $ARCDIR/pgbf${fhr2}.${CDUMP}.${CDATE}.grib2
        (( fhr = $fhr + $FHOUT_GFS ))
    done
fi
if [ $CDUMP = "gdas" ]; then
    flist="000 003 006 009"
    for fhr in $flist; do
        fname=${APREFIX}pgrb2.1p00.f${fhr}
        fhr2=$(printf %02i $fhr)
        $NCP $fname $ARCDIR/pgbf${fhr2}.${CDUMP}.${CDATE}.grib2
    done
fi

if [ -s avno.t${cyc}z.cyclone.trackatcfunix ]; then
    PLSOT4=`echo $PSLOT|cut -c 1-4 |tr '[a-z]' '[A-Z]'`
    cat avno.t${cyc}z.cyclone.trackatcfunix | sed s:AVNO:${PLSOT4}:g  > ${ARCDIR}/atcfunix.${CDUMP}.$CDATE
    cat avnop.t${cyc}z.cyclone.trackatcfunix | sed s:AVNO:${PLSOT4}:g  > ${ARCDIR}/atcfunixp.${CDUMP}.$CDATE
fi

if [ $CDUMP = "gdas" -a -s gdas.t${cyc}z.cyclone.trackatcfunix ]; then
    PLSOT4=`echo $PSLOT|cut -c 1-4 |tr '[a-z]' '[A-Z]'`
    cat gdas.t${cyc}z.cyclone.trackatcfunix | sed s:AVNO:${PLSOT4}:g  > ${ARCDIR}/atcfunix.${CDUMP}.$CDATE
    cat gdasp.t${cyc}z.cyclone.trackatcfunix | sed s:AVNO:${PLSOT4}:g  > ${ARCDIR}/atcfunixp.${CDUMP}.$CDATE
fi

if [ $CDUMP = "gfs" ]; then
    $NCP storms.gfso.atcf_gen.$CDATE      ${ARCDIR}/.
    $NCP storms.gfso.atcf_gen.altg.$CDATE ${ARCDIR}/.
    $NCP trak.gfso.atcfunix.$CDATE        ${ARCDIR}/.
    $NCP trak.gfso.atcfunix.altg.$CDATE   ${ARCDIR}/.

    mkdir -p ${ARCDIR}/tracker.$CDATE/$CDUMP
    blist="epac natl"
    for basin in $blist; do
        cp -rp $basin                     ${ARCDIR}/tracker.$CDATE/$CDUMP
    done
fi

# Archive required gaussian gfs forecast files for Fit2Obs
if [ $CDUMP = "gfs" -a $FITSARC = "YES" ]; then
    VFYARC=${VFYARC:-$ROTDIR/vrfyarch}
    [[ ! -d $VFYARC ]] && mkdir -p $VFYARC
    mkdir -p $VFYARC/${CDUMP}.$PDY/$cyc
    prefix=${CDUMP}.t${cyc}z
    fhmax=${FHMAX_FITS:-$FHMAX_GFS}
    fhr=0
    while [[ $fhr -le $fhmax ]]; do
        fhr3=$(printf %03i $fhr)
        sfcfile=${prefix}.sfcf${fhr3}${ASUFFIX}
        sigfile=${prefix}.atmf${fhr3}${ASUFFIX}
        $NCP $sfcfile $VFYARC/${CDUMP}.$PDY/$cyc/
        $NCP $sigfile $VFYARC/${CDUMP}.$PDY/$cyc/
        (( fhr = $fhr + 6 ))
    done
fi


###############################################################
# Archive data to OFFLINE SAVE
if [ $HPSSARCH = "YES" ]; then
###############################################################

#--display status and location info
echo "Archive is running offline to increase parallel performance"
export ATARDIR=$ATARDIR
export JOB_LOG_DIR=$PBS_O_WORKDIR

#--determine when to save ICs for warm start and forecast-only runs
SAVEWARMICA="NO"
SAVEWARMICB="NO"
SAVEFCSTIC="NO"
firstday=$($NDATE +24 $SDATE)
mm=`echo $CDATE|cut -c 5-6`
dd=`echo $CDATE|cut -c 7-8`
nday=$(( (mm-1)*30+dd ))
mod=$(($nday % $ARCH_WARMICFREQ))
if [ $CDATE -eq $firstday -a $cyc -eq $ARCHINC_CYC ]; then SAVEWARMICA="YES" ; fi
if [ $CDATE -eq $firstday -a $cyc -eq $ARCHICS_CYC ]; then SAVEWARMICB="YES" ; fi
if [ $mod -eq 0 -a $cyc -eq $ARCHINC_CYC ]; then SAVEWARMICA="YES" ; fi
if [ $mod -eq 0 -a $cyc -eq $ARCHICS_CYC ]; then SAVEWARMICB="YES" ; fi

if [ $ARCHICS_CYC -eq 18 ]; then
    nday1=$((nday+1))
    mod1=$(($nday1 % $ARCH_WARMICFREQ))
    if [ $mod1 -eq 0 -a $cyc -eq $ARCHICS_CYC ] ; then SAVEWARMICB="YES" ; fi
    if [ $mod1 -ne 0 -a $cyc -eq $ARCHICS_CYC ] ; then SAVEWARMICB="NO" ; fi
    if [ $CDATE -eq $SDATE -a $cyc -eq $ARCHICS_CYC ] ; then SAVEWARMICB="YES" ; fi
fi

mod=$(($nday % $ARCH_FCSTICFREQ))
if [ $mod -eq 0 -o $CDATE -eq $firstday ]; then SAVEFCSTIC="YES" ; fi


export ARCH_LIST="$COMIN/archlist"
[[ -d $ARCH_LIST ]] && rm -rf $ARCH_LIST
mkdir -p $ARCH_LIST
cd $ARCH_LIST

$HOMEgfs/ush/hpssarch_gen.sh $CDUMP
status=$?
if [ $status -ne 0  ]; then
    echo "$HOMEgfs/ush/hpssarch_gen.sh $CDUMP failed, ABORT!"
    exit $status
fi

cd $ROTDIR

if [ $CDUMP = "gfs" ]; then

    #for targrp in gfsa gfsb - NOTE - do not check htar error status
    for targrp in gfsa gfsb; do
        export TRANSFER_TARGET_FILE=$targrp
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
    done

    if [ ${SAVEFCSTNEMSIO:-"YES"} = "YES" ]; then
        for targrp in gfs_flux gfs_${format}a gfs_${format}b gfs_pgrb2b; do
            export TRANSFER_TARGET_FILE=$targrp
            ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
            status=$?
            if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
                echo "OFFLINE TAR $CDATE ${targrp}.tar failed"
                exit $status
            fi
        done
    fi

    #for targrp in gfswave
    if [ $DO_WAVE = "YES" -a "$WAVE_CDUMP" != "gdas" ]; then
        for targrp in gfswave; do
            export TRANSFER_TARGET_FILE=$targrp
            ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
            status=$?
            if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
                echo "OFFLINE TAR $CDATE ${targrp}.tar failed"
                exit $status
            fi
        done
    fi

    #for restarts
    if [ $SAVEFCSTIC = "YES" ]; then
        export TRANSFER_TARGET_FILE=gfs_restarta
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
        status=$?
        if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
            echo "OFFLINE TAR $CDATE gfs_restarta.tar failed"
            exit $status
        fi
    fi

    #for downstream products
    if [ $DO_BUFRSND = "YES" -o $WAFSF = "YES" ]; then
        #### htar -P -cvf $ATARDIR/$CDATE/gfs_downstream.tar `cat $ARCH_LIST/gfs_downstream.txt`
        #### tar -P -cvf $COM_ARCHOFFLINE/$CDATE/gfs_downstream.tar `cat $ARCH_LIST/gfs_downstream.txt`
        export TRANSFER_TARGET_FILE=gfs_downstream
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
        status=$?
        if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
            echo "OFFLINE TAR $CDATE gfs_downstream.tar failed"
            exit $status
        fi
    fi

fi


if [ $CDUMP = "gdas" ]; then

    export TRANSFER_TARGET_FILE=gdas
    ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
    status=$?
    if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
        echo "OFFLINE TAR $CDATE gdas.tar failed"
        exit $status
    fi

    #gdaswave
    if [ $DO_WAVE = "YES" ]; then
        export TRANSFER_TARGET_FILE=gdaswave
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
        status=$?
        if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
            echo "OFFLINE TAR $CDATE gdaswave.tar failed"
            exit $status
        fi
    fi

    if [ $SAVEWARMICA = "YES" -o $SAVEFCSTIC = "YES" ]; then
        export TRANSFER_TARGET_FILE=gdas_restarta
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
        status=$?
        if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
            echo "OFFLINE TAR $CDATE gdas_restarta.tar failed"
            exit $status
        fi
        if [ $DO_WAVE = "YES" ]; then
            export TRANSFER_TARGET_FILE=gdaswave_restart
            ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
            status=$?
            if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
                echo "OFFLINE TAR $CDATE gdaswave_restart.tar failed"
                exit $status
            fi
        fi
    fi

    if [ $SAVEWARMICB = "YES" -o $SAVEFCSTIC = "YES" ]; then
        export TRANSFER_TARGET_FILE=gdas_restartb
        ${HOME_emc_ecf_wm}/scripts/hpss_global_archive_driver.sh
        status=$?
        if [ $status -ne 0  -a $CDATE -ge $firstday ]; then
            echo "OFFLINE TAR $CDATE gdas_restartb.tar failed"
            exit $status
        fi
    fi

fi

###############################################################
fi  ##end of HPSS archive
###############################################################



###############################################################
# Clean up previous cycles; various depths
# PRIOR CYCLE: Leave the prior cycle alone
GDATE=$($NDATE -$assim_freq $CDATE)

# PREVIOUS to the PRIOR CYCLE
GDATE=$($NDATE -$assim_freq $GDATE)
gPDY=$(echo $GDATE | cut -c1-8)
gcyc=$(echo $GDATE | cut -c9-10)

# Remove the TMPDIR directory
COMIN="$RUNDIR/$GDATE"
[[ -d $COMIN ]] && rm -rf $COMIN

echo "ENDED NORMALLY."

##########################################
# Remove the Temporary working directory
##########################################
cd $DATAROOT
[[ $KEEPDATA = "NO" ]] && rm -rf $DATA

date
exit 0
