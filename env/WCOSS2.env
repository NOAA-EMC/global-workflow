#! /usr/bin/env bash

if [[ $# -ne 1 ]]; then

    echo "Must specify an input argument to set runtime environment variables!"
    exit 1

fi

step=$1

# WCOSS2 information
export launcher="mpiexec -l"
export mpmd_opt="--cpu-bind verbose,core cfp"

# Calculate common resource variables
# Check first if the dependent variables are set
if [[ -n "${ntasks:-}" && -n "${max_tasks_per_node:-}" && -n "${tasks_per_node:-}" ]]; then
    max_threads_per_task=$((max_tasks_per_node / tasks_per_node))
    NTHREADSmax=${threads_per_task:-${max_threads_per_task}}
    NTHREADS1=${threads_per_task:-1}
    [[ ${NTHREADSmax} -gt ${max_threads_per_task} ]] && NTHREADSmax=${max_threads_per_task}
    [[ ${NTHREADS1} -gt ${max_threads_per_task} ]] && NTHREADS1=${max_threads_per_task}
    APRUN="${launcher} -n ${ntasks}"
else
    echo "ERROR config.resources must be sourced before sourcing WCOSS2.env"
    exit 2
fi

if [[ "${step}" = "prep" ]] || [[ "${step}" = "prepbufr" ]]; then

    export POE=${POE:-"YES"}
    export BACK=${BACK:-"off"}
    export sys_tp="wcoss2"
    export launcher_PREP="mpiexec"

elif [[ "${step}" = "prepsnowobs" ]]; then

    export APRUN_CALCFIMS="${APRUN}"

elif [[ "${step}" = "prep_emissions" ]]; then

    export APRUN="${APRUN}"

elif [[ "${step}" = "waveinit" ]] || [[ "${step}" = "waveprep" ]] || [[ "${step}" = "wavepostsbs" ]] || [[ "${step}" = "wavepostbndpnt" ]] || [[ "${step}" = "wavepostbndpntbll"  ]] || [[ "${step}" = "wavepostpnt" ]]; then

    export USE_CFP="YES"
    export wavempexec="${launcher} -np"
    export wave_mpmd=${mpmd_opt}

elif [[ "${step}" = "atmanlvar" ]]; then

    export NTHREADS_ATMANLVAR=${NTHREADSmax}
    export APRUN_ATMANLVAR="${APRUN}"

elif [[ "${step}" = "atmensanlobs"  ]]; then

    export NTHREADS_ATMENSANLOBS=${NTHREADSmax}
    export APRUN_ATMENSANLOBS="${APRUN}"

elif [[ "${step}" = "atmensanlsol" ]]; then

    export NTHREADS_ATMENSANLSOL=${NTHREADSmax}
    export APRUN_ATMENSANLSOL="${APRUN}"

elif [[ "${step}" = "atmensanlletkf" ]]; then

    export NTHREADS_ATMENSANLLETKF=${NTHREADSmax}
    export APRUN_ATMENSANLLETKF="${APRUN}"

elif [[ "${step}" = "atmensanlfv3inc" ]]; then

    export NTHREADS_ATMENSANLFV3INC=${NTHREADSmax}
    export APRUN_ATMENSANLFV3INC="${APRUN}"

elif [[ "${step}" = "aeroanlrun" ]]; then

    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

    export NTHREADS_AEROANL=${NTHREADSmax}
    export APRUN_AEROANL="${APRUN}"

elif [[ "${step}" = "prepobsaero" ]]; then

    export NTHREADS_PREPOBSAERO=${NTHREADS1}
    export APRUN_PREPOBSAERO="${APRUN} --ppn ${tasks_per_node}--cpu-bind depth --depth=${NTHREADS_PREPOBSAERO}"

elif [[ "${step}" = "snowanl" ]]; then

    export NTHREADS_SNOWANL=${NTHREADSmax}
    export APRUN_SNOWANL="${APRUN}"

    export APRUN_APPLY_INCR="${launcher} -n 6"

elif [[ "${step}" = "esnowrecen" ]]; then

    export NTHREADS_ESNOWRECEN=${NTHREADSmax}
    export APRUN_ESNOWRECEN="${APRUN}"

    export APRUN_APPLY_INCR="${launcher} -n 6"

elif [[ "${step}" = "marinebmat" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd --multi-prog"
    export APRUN_MARINEBMAT="${APRUN}"

elif [[ "${step}" = "ocnanalrun" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd --multi-prog"

    export APRUN_OCNANAL="${APRUN}"

elif [[ "${step}" = "ocnanalchkpt" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd --multi-prog"

    export APRUN_OCNANAL="${APRUN}"

elif [[ "${step}" = "ocnanalecen" ]]; then

    export NTHREADS_OCNANALECEN=${NTHREADSmax}
    export APRUN_OCNANALECEN="${APRUN} --cpus-per-task=${NTHREADS_OCNANALECEN}"

elif [[ "${step}" = "marineanalletkf" ]]; then

    export NTHREADS_MARINEANALLETKF=${NTHREADSmax}
    export APRUN_MARINEANALLETKF="${APRUN} --cpus-per-task=${NTHREADS_MARINEANALLETKF}"
    
elif [[ "${step}" = "atmanlfv3inc" ]]; then

    export NTHREADS_ATMANLFV3INC=${NTHREADSmax}
    export APRUN_ATMANLFV3INC="${APRUN}"

elif [[ "${step}" = "anal" ]] || [[ "${step}" = "analcalc" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    if [[ "${step}" = "analcalc" ]]; then
      export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
    fi

    export NTHREADS_GSI=${NTHREADSmax}
    export APRUN_GSI="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export NTHREADS_CALCINC=${threads_per_task_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${max_threads_per_task} ]] && export NTHREADS_CALCINC=${max_threads_per_task}
    export APRUN_CALCINC="${launcher} \$ncmd"

    export NTHREADS_CYCLE=${threads_per_task_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${max_tasks_per_node} ]] && export NTHREADS_CYCLE=${max_tasks_per_node}
    ntasks_cycle=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${ntasks_cycle} -ppn ${tasks_per_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

    export NTHREADS_GAUSFCANL=1
    ntasks_gausfcanl=${ntasks_gausfcanl:-1}
    export APRUN_GAUSFCANL="${launcher} -n ${ntasks_gausfcanl}"

    export NTHREADS_CHGRES=${threads_per_task_echgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${max_tasks_per_node} ]] && export NTHREADS_CHGRES=${max_tasks_per_node}
    export APRUN_CHGRES=""

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "sfcanl" ]]; then

    export NTHREADS_CYCLE=${threads_per_task:-14}
    [[ ${NTHREADS_CYCLE} -gt ${max_tasks_per_node} ]] && export NTHREADS_CYCLE=${max_tasks_per_node}
    export APRUN_CYCLE="${APRUN}"

elif [[ "${step}" = "eobs" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    export NTHREADS_GSI=${NTHREADSmax}
    export APRUN_GSI="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "eupd" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=2G
    export MPICH_COLL_OPT_OFF=1
    export FI_OFI_RXM_SAR_LIMIT=3145728

    export NTHREADS_ENKF=${NTHREADSmax}
    export APRUN_ENKF="${launcher} -n ${ntasks_enkf:-${ntasks}} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_ENKF}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "fcst" ]] || [[ "${step}" = "efcs" ]]; then

    (( nnodes = (ntasks+tasks_per_node-1)/tasks_per_node ))
    (( ufs_ntasks = nnodes*tasks_per_node ))
    # With ESMF threading, the model wants to use the full node
    export APRUN_UFS="${launcher} -n ${ufs_ntasks} -ppn ${tasks_per_node} --cpu-bind depth --depth 1"
    unset nnodes ufs_ntasks

    # TODO: Why are fcst and efcs so different on WCOSS2?
    # TODO: Compare these with the ufs-weather-model regression test job card at:
    # https://github.com/ufs-community/ufs-weather-model/blob/develop/tests/fv3_conf/fv3_qsub.IN_wcoss2
    export FI_OFI_RXM_RX_SIZE=40000
    export FI_OFI_RXM_TX_SIZE=40000
    export OMP_PLACES=cores
    export OMP_STACKSIZE=2048M
    export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
    export FI_OFI_RXM_SAR_LIMIT=3145728

elif [[ "${step}" = "upp" ]]; then

    export NTHREADS_UPP=${NTHREADS1}
    export APRUN_UPP="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_UPP}"

elif [[ "${step}" = "atmos_products" ]]; then

    export USE_CFP="YES"  # Use MPMD for downstream product generation

elif [[ "${step}" = "oceanice_products" ]]; then

    export NTHREADS_OCNICEPOST=${NTHREADS1}
    export APRUN_OCNICEPOST="${launcher} -n 1 -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_OCNICEPOST}"

elif [[ "${step}" = "ecen" ]]; then

    export NTHREADS_ECEN=${NTHREADSmax}
    export APRUN_ECEN="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_ECEN}"

    export NTHREADS_CHGRES=${threads_per_task_chgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${max_tasks_per_node} ]] && export NTHREADS_CHGRES=${max_tasks_per_node}
    export APRUN_CHGRES="time"

    export NTHREADS_CALCINC=${threads_per_task_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${max_threads_per_task} ]] && export NTHREADS_CALCINC=${max_threads_per_task}
    export APRUN_CALCINC="${APRUN}"

    export NTHREADS_CYCLE=${threads_per_task_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${max_tasks_per_node} ]] && export NTHREADS_CYCLE=${max_tasks_per_node}
    export APRUN_CYCLE="${APRUN} -ppn ${tasks_per_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "esfc" ]]; then

    export NTHREADS_ESFC=${NTHREADSmax}
    export APRUN_ESFC="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_ESFC}"

    export NTHREADS_CYCLE=${threads_per_task_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${max_tasks_per_node} ]] && export NTHREADS_CYCLE=${max_tasks_per_node}
    export APRUN_CYCLE="${APRUN} -ppn ${tasks_per_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "epos" ]]; then

    export NTHREADS_EPOS=${NTHREADSmax}
    export APRUN_EPOS="${APRUN} -ppn ${tasks_per_node} --cpu-bind depth --depth ${NTHREADS_EPOS}"

elif [[ "${step}" = "postsnd" ]]; then

    export MPICH_MPIIO_HINTS_DISPLAY=1
    export OMP_NUM_THREADS=1

    export NTHREADS_POSTSND=${NTHREADS1}
    export APRUN_POSTSND="${APRUN} --depth=${NTHREADS_POSTSND} --cpu-bind depth"

    export NTHREADS_POSTSNDCFP=${threads_per_task_postsndcfp:-1}
    [[ ${NTHREADS_POSTSNDCFP} -gt ${max_threads_per_task} ]] && export NTHREADS_POSTSNDCFP=${max_threads_per_task}
    export APRUN_POSTSNDCFP="${launcher} -np ${ntasks_postsndcfp} ${mpmd_opt}"

elif [[ "${step}" = "awips" ]]; then

    export NTHREADS_AWIPS=${NTHREADS1}
    export APRUN_AWIPSCFP="${launcher} -np ${ntasks} ${mpmd_opt}"

elif [[ "${step}" = "gempak" ]]; then

    export NTHREADS_GEMPAK=${NTHREADS1}
    export APRUN_GEMPAKCFP="${launcher} -np ${ntasks} ${mpmd_opt}"

elif [[ "${step}" = "fit2obs" ]]; then

    export NTHREADS_FIT2OBS=${NTHREADS1}
    export MPIRUN="${launcher} -np ${ntasks}"

elif [[ "${step}" = "waveawipsbulls" ]]; then

    unset PERL5LIB

elif [[ "${step:0:3}" = "mos" ]]; then

    export FORT_BUFFERED=TRUE

    if [[ "${step}" = "mos_stn_prep" ]]; then
       export OMP_PROC_BIND=true
    fi

fi
