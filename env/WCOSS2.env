#! /usr/bin/env bash

if [[ $# -ne 1 ]]; then

    echo "Must specify an input argument to set runtime environment variables!"
    echo "argument can be any one of the following:"
    echo "atmanlrun atmensanlrun aeroanlrun landanl"
    echo "anal sfcanl fcst post vrfy metp"
    echo "eobs eupd ecen esfc efcs epos"
    echo "postsnd awips gempak"
    exit 1

fi

step=$1

# WCOSS2 information
export launcher="mpiexec -l"
export mpmd_opt="--cpu-bind verbose,core cfp"

export npe_node_max=128

if [[ "${step}" = "prep" ]] || [[ "${step}" = "prepbufr" ]]; then

    nth_max=$((npe_node_max / npe_node_prep))

    export POE=${POE:-"YES"}
    export BACK=${BACK:-"off"}
    export sys_tp="wcoss2"
    export launcher_PREP="mpiexec"

elif [[ "${step}" = "preplandobs" ]]; then

    export APRUN_CALCFIMS="${launcher} -n 1"

elif [[ "${step}" = "waveinit" ]] || [[ "${step}" = "waveprep" ]] || [[ "${step}" = "wavepostsbs" ]] || [[ "${step}" = "wavepostbndpnt" ]] || [[ "${step}" = "wavepostbndpntbll"  ]] || [[ "${step}" = "wavepostpnt" ]]; then

    export USE_CFP="YES"
    if [[ "${step}" = "waveprep" ]] && [[ "${CDUMP}" = "gfs" ]]; then export NTASKS=${NTASKS_gfs} ; fi
    export wavempexec="${launcher} -np"
    export wave_mpmd=${mpmd_opt}

elif [[ "${step}" = "atmanlrun" ]]; then

    nth_max=$((npe_node_max / npe_node_atmanlrun))

    export NTHREADS_ATMANL=${nth_atmanlrun:-${nth_max}}
    [[ ${NTHREADS_ATMANL} -gt ${nth_max} ]] && export NTHREADS_ATMANL=${nth_max}
    export APRUN_ATMANL="${launcher} -n ${npe_atmanlrun}"

elif [[ "${step}" = "atmensanlrun" ]]; then

    nth_max=$((npe_node_max / npe_node_atmensanlrun))

    export NTHREADS_ATMENSANL=${nth_atmensanlrun:-${nth_max}}
    [[ ${NTHREADS_ATMENSANL} -gt ${nth_max} ]] && export NTHREADS_ATMENSANL=${nth_max}
    export APRUN_ATMENSANL="${launcher} -n ${npe_atmensanlrun}"

elif [[ "${step}" = "aeroanlrun" ]]; then

    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

    nth_max=$((npe_node_max / npe_node_aeroanlrun))

    export NTHREADS_AEROANL=${nth_aeroanlrun:-${nth_max}}
    [[ ${NTHREADS_AEROANL} -gt ${nth_max} ]] && export NTHREADS_AEROANL=${nth_max}
    export APRUN_AEROANL="${launcher} -n ${npe_aeroanlrun}"

elif [[ "${step}" = "landanl" ]]; then

    nth_max=$((npe_node_max / npe_node_landanl))

    export NTHREADS_LANDANL=${nth_landanl:-${nth_max}}
    [[ ${NTHREADS_LANDANL} -gt ${nth_max} ]] && export NTHREADS_LANDANL=${nth_max}
    export APRUN_LANDANL="${launcher} -n ${npe_landanl}"

    export APRUN_APPLY_INCR="${launcher} -n 6"

elif [[ "${step}" = "anal" ]] || [[ "${step}" = "analcalc" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    if [[ "${step}" = "analcalc" ]]; then
      export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
    fi

    nth_max=$((npe_node_max / npe_node_anal))

    export NTHREADS_GSI=${nth_anal:-${nth_max}}
    [[ ${NTHREADS_GSI} -gt ${nth_max} ]] && export NTHREADS_GSI=${nth_max}
    export APRUN_GSI="${launcher} -n ${npe_gsi:-${npe_anal}} -ppn ${npe_node_anal} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${launcher} \$ncmd"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    npe_cycle=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${npe_cycle} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

    export NTHREADS_GAUSFCANL=1
    npe_gausfcanl=${npe_gausfcanl:-1}
    export APRUN_GAUSFCANL="${launcher} -n ${npe_gausfcanl}"

    export NTHREADS_CHGRES=${nth_echgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${npe_node_max} ]] && export NTHREADS_CHGRES=${npe_node_max}
    export APRUN_CHGRES=""

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "sfcanl" ]]; then

    nth_max=$((npe_node_max / npe_node_sfcanl))

    export NTHREADS_CYCLE=${nth_sfcanl:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    npe_sfcanl=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${npe_sfcanl}"

elif [[ "${step}" = "eobs" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    nth_max=$((npe_node_max / npe_node_eobs))

    export NTHREADS_GSI=${nth_eobs:-${nth_max}}
    [[ ${NTHREADS_GSI} -gt ${nth_max} ]] && export NTHREADS_GSI=${nth_max}
    export APRUN_GSI="${launcher} -n ${npe_gsi:-${npe_eobs}} -ppn ${npe_node_eobs} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "eupd" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=2G
    export MPICH_COLL_OPT_OFF=1
    export FI_OFI_RXM_SAR_LIMIT=3145728

    nth_max=$((npe_node_max / npe_node_eupd))

    export NTHREADS_ENKF=${nth_eupd:-${nth_max}}
    [[ ${NTHREADS_ENKF} -gt ${nth_max} ]] && export NTHREADS_ENKF=${nth_max}
    export APRUN_ENKF="${launcher} -n ${npe_enkf:-${npe_eupd}} -ppn ${npe_node_eupd} --cpu-bind depth --depth ${NTHREADS_ENKF}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "fcst" ]] || [[ "${step}" = "efcs" ]]; then

    if [[ "${CDUMP}" =~ "gfs" ]]; then
        nprocs="npe_${step}_gfs"
        ppn="npe_node_${step}_gfs" || ppn="npe_node_${step}"
    else
        nprocs="npe_${step}"
        ppn="npe_node_${step}"
    fi
    (( nnodes = (${!nprocs}+${!ppn}-1)/${!ppn} ))
    (( ntasks = nnodes*${!ppn} ))
    # With ESMF threading, the model wants to use the full node
    export APRUN_UFS="${launcher} -n ${ntasks} -ppn ${!ppn} --cpu-bind depth --depth 1"
    unset nprocs ppn nnodes ntasks

    # TODO: Why are fcst and efcs so different on WCOSS2?
    # TODO: Compare these with the ufs-weather-model regression test job card at:
    # https://github.com/ufs-community/ufs-weather-model/blob/develop/tests/fv3_conf/fv3_qsub.IN_wcoss2
    export FI_OFI_RXM_RX_SIZE=40000
    export FI_OFI_RXM_TX_SIZE=40000
    if [[ "${step}" = "fcst" ]]; then
        export OMP_PLACES=cores
        export OMP_STACKSIZE=2048M
    elif [[ "${step}" = "efcs" ]]; then
        export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
        export FI_OFI_RXM_SAR_LIMIT=3145728
    fi

elif [[ "${step}" = "upp" ]]; then

    nth_max=$((npe_node_max / npe_node_upp))

    export NTHREADS_UPP=${nth_upp:-1}
    [[ ${NTHREADS_UPP} -gt ${nth_max} ]] && export NTHREADS_UPP=${nth_max}
    export APRUN_UPP="${launcher} -n ${npe_upp} -ppn ${npe_node_upp} --cpu-bind depth --depth ${NTHREADS_UPP}"

elif [[ "${step}" = "post" ]]; then

    nth_max=$((npe_node_max / npe_node_post))

    export NTHREADS_NP=${nth_np:-1}
    [[ ${NTHREADS_NP} -gt ${nth_max} ]] && export NTHREADS_NP=${nth_max}
    export APRUN_NP="${launcher} -n ${npe_np:-${npe_post}} -ppn ${npe_node_post} --cpu-bind depth --depth ${NTHREADS_NP}"

    export USE_CFP="YES"  # Use MPMD for downstream product generation on WCOSS2
    export NTHREADS_DWN=${nth_dwn:-1}
    [[ ${NTHREADS_DWN} -gt ${nth_max} ]] && export NTHREADS_DWN=${nth_max}
    export APRUN_DWN="${launcher} -np ${npe_dwn} ${mpmd_opt}"

elif [[ "${step}" = "ecen" ]]; then

    nth_max=$((npe_node_max / npe_node_ecen))

    export NTHREADS_ECEN=${nth_ecen:-${nth_max}}
    [[ ${NTHREADS_ECEN} -gt ${nth_max} ]] && export NTHREADS_ECEN=${nth_max}
    export APRUN_ECEN="${launcher} -n ${npe_ecen} -ppn ${npe_node_ecen} --cpu-bind depth --depth ${NTHREADS_ECEN}"

    export NTHREADS_CHGRES=${nth_chgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${npe_node_max} ]] && export NTHREADS_CHGRES=${npe_node_max}
    export APRUN_CHGRES="time"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${launcher} -n ${npe_ecen}"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${launcher} -n ${npe_ecen} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "esfc" ]]; then

    nth_max=$((npe_node_max / npe_node_esfc))

    export NTHREADS_ESFC=${nth_esfc:-${nth_max}}
    [[ ${NTHREADS_ESFC} -gt ${nth_max} ]] && export NTHREADS_ESFC=${nth_max}
    export APRUN_ESFC="${launcher} -n ${npe_esfc} -ppn ${npe_node_esfc} --cpu-bind depth --depth ${NTHREADS_ESFC}"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${launcher} -n ${npe_esfc} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "epos" ]]; then

    nth_max=$((npe_node_max / npe_node_epos))

    export NTHREADS_EPOS=${nth_epos:-${nth_max}}
    [[ ${NTHREADS_EPOS} -gt ${nth_max} ]] && export NTHREADS_EPOS=${nth_max}
    export APRUN_EPOS="${launcher} -n ${npe_epos} -ppn ${npe_node_epos} --cpu-bind depth --depth ${NTHREADS_EPOS}"

elif [[ "${step}" = "postsnd" ]]; then

    export MPICH_MPIIO_HINTS_DISPLAY=1
    export OMP_NUM_THREADS=1

    nth_max=$((npe_node_max / npe_node_postsnd))

    export NTHREADS_POSTSND=${nth_postsnd:-1}
    [[ ${NTHREADS_POSTSND} -gt ${nth_max} ]] && export NTHREADS_POSTSND=${nth_max}
    export APRUN_POSTSND="${launcher} -n ${npe_postsnd} --depth=${NTHREADS_POSTSND} --cpu-bind depth"

    export NTHREADS_POSTSNDCFP=${nth_postsndcfp:-1}
    [[ ${NTHREADS_POSTSNDCFP} -gt ${nth_max} ]] && export NTHREADS_POSTSNDCFP=${nth_max}
    export APRUN_POSTSNDCFP="${launcher} -np ${npe_postsndcfp} ${mpmd_opt}"

elif [[ "${step}" = "awips" ]]; then

    nth_max=$((npe_node_max / npe_node_awips))

    export NTHREADS_AWIPS=${nth_awips:-2}
    [[ ${NTHREADS_AWIPS} -gt ${nth_max} ]] && export NTHREADS_AWIPS=${nth_max}
    export APRUN_AWIPSCFP="${launcher} -np ${npe_awips} ${mpmd_opt}"

elif [[ "${step}" = "gempak" ]]; then

    if [[ ${CDUMP} == "gfs" ]]; then
        npe_gempak=${npe_gempak_gfs}
        npe_node_gempak=${npe_node_gempak_gfs}
    fi

    nth_max=$((npe_node_max / npe_node_gempak))

    export NTHREADS_GEMPAK=${nth_gempak:-1}
    [[ ${NTHREADS_GEMPAK} -gt ${nth_max} ]] && export NTHREADS_GEMPAK=${nth_max}
    export APRUN_GEMPAKCFP="${launcher} -np ${npe_gempak} ${mpmd_opt}"

elif [[ "${step}" = "fit2obs" ]]; then

    nth_max=$((npe_node_max / npe_node_fit2obs))

    export NTHREADS_FIT2OBS=${nth_fit2obs:-1}
    [[ ${NTHREADS_FIT2OBS} -gt ${nth_max} ]] && export NTHREADS_FIT2OBS=${nth_max}
    export MPIRUN="${launcher} -np ${npe_fit2obs}"

elif [[ "${step}" = "waveawipsbulls" ]]; then

    unset PERL5LIB

fi
