#! /usr/bin/env bash

if [[ $# -ne 1 ]]; then

    echo "Must specify an input argument to set runtime environment variables!"
    exit 1

fi

step=$1

# WCOSS2 information
export launcher="mpiexec -l"
export mpmd_opt="--cpu-bind verbose,core cfp"

# Calculate common resource variables
# Check first if the dependent variables are set
if [[ -n "${npe:-}" && -n "${npe_node_max:-}" && -n "${npe_node:-}" ]]; then
    nth_max=$((npe_node_max / npe_node))
    NTHREADSmax=${nth:-${nth_max}}
    NTHREADS1=${nth:-1}
    NTHREADS2=${nth:-2}
    [[ ${NTHREADSmax} -gt ${nth_max} ]] && NTHREADSmax=${nth_max}
    [[ ${NTHREADS1} -gt ${nth_max} ]] && NTHREADS1=${nth_max}
    [[ ${NTHREADS2} -gt ${nth_max} ]] && NTHREADS2=${nth_max}
    APRUN="${launcher} -n ${npe}"
fi

if [[ "${step}" = "prep" ]] || [[ "${step}" = "prepbufr" ]]; then

    export POE=${POE:-"YES"}
    export BACK=${BACK:-"off"}
    export sys_tp="wcoss2"
    export launcher_PREP="mpiexec"

elif [[ "${step}" = "prepsnowobs" ]]; then

    export APRUN_CALCFIMS="${APRUN}"

elif [[ "${step}" = "prep_emissions" ]]; then

    export APRUN="${APRUN}"

elif [[ "${step}" = "waveinit" ]] || [[ "${step}" = "waveprep" ]] || [[ "${step}" = "wavepostsbs" ]] || [[ "${step}" = "wavepostbndpnt" ]] || [[ "${step}" = "wavepostbndpntbll"  ]] || [[ "${step}" = "wavepostpnt" ]]; then

    export USE_CFP="YES"
    export wavempexec="${launcher} -np"
    export wave_mpmd=${mpmd_opt}

elif [[ "${step}" = "atmanlvar" ]]; then

    export NTHREADS_ATMANLVAR=${NTHREADSmax}
    export APRUN_ATMANLVAR="${APRUN}"

elif [[ "${step}" = "atmensanlletkf" ]]; then

    export NTHREADS_ATMENSANLLETKF=${NTHREADSmax}
    export APRUN_ATMENSANLLETKF="${APRUN}"

elif [[ "${step}" = "atmensanlfv3inc" ]]; then

    export NTHREADS_ATMENSANLFV3INC=${NTHREADSmax}
    export APRUN_ATMENSANLFV3INC="${APRUN}"

elif [[ "${step}" = "aeroanlrun" ]]; then

    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

    export NTHREADS_AEROANL=${NTHREADSmax}
    export APRUN_AEROANL="${APRUN}"

elif [[ "${step}" = "prepobsaero" ]]; then

    export NTHREADS_PREPOBSAERO=${NTHREADS1}
    export APRUN_PREPOBSAERO="${APRUN} --ppn ${npe_node}--cpu-bind depth --depth=${NTHREADS_PREPOBSAERO}"

elif [[ "${step}" = "snowanl" ]]; then

    export NTHREADS_SNOWANL=${NTHREADSmax}
    export APRUN_SNOWANL="${APRUN}"

    export APRUN_APPLY_INCR="${launcher} -n 6"

elif [[ "${step}" = "atmanlfv3inc" ]]; then

    export NTHREADS_ATMANLFV3INC=${NTHREADSmax}
    export APRUN_ATMANLFV3INC="${APRUN}"

elif [[ "${step}" = "anal" ]] || [[ "${step}" = "analcalc" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    if [[ "${step}" = "analcalc" ]]; then
      export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
    fi

    export NTHREADS_GSI=${NTHREADSmax}
    export APRUN_GSI="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${launcher} \$ncmd"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    npe_cycle=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${npe_cycle} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

    export NTHREADS_GAUSFCANL=1
    npe_gausfcanl=${npe_gausfcanl:-1}
    export APRUN_GAUSFCANL="${launcher} -n ${npe_gausfcanl}"

    export NTHREADS_CHGRES=${nth_echgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${npe_node_max} ]] && export NTHREADS_CHGRES=${npe_node_max}
    export APRUN_CHGRES=""

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "sfcanl" ]]; then

    export NTHREADS_CYCLE=${nth:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${APRUN}"

elif [[ "${step}" = "eobs" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=1G
    export FI_OFI_RXM_SAR_LIMIT=3145728

    export NTHREADS_GSI=${NTHREADSmax}
    export APRUN_GSI="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_GSI}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "eupd" ]]; then

    export OMP_PLACES=cores
    export OMP_STACKSIZE=2G
    export MPICH_COLL_OPT_OFF=1
    export FI_OFI_RXM_SAR_LIMIT=3145728

    export NTHREADS_ENKF=${NTHREADSmax}
    export APRUN_ENKF="${launcher} -n ${npe_enkf:-${npe}} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_ENKF}"

    export CFP_MP=${CFP_MP:-"NO"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -np \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "fcst" ]] || [[ "${step}" = "efcs" ]]; then

    ppn="npe_node_${RUN}"
    [[ -z "${!ppn+0}" ]] && ppn="npe_node"
    nprocs="npe_${RUN}"
    [[ -z ${!nprocs+0} ]] && nprocs="npe"

    (( nnodes = (${!nprocs}+${!ppn}-1)/${!ppn} ))
    (( ntasks = nnodes*${!ppn} ))
    # With ESMF threading, the model wants to use the full node
    export APRUN_UFS="${launcher} -n ${ntasks} -ppn ${!ppn} --cpu-bind depth --depth 1"
    unset nprocs ppn nnodes ntasks

    # TODO: Why are fcst and efcs so different on WCOSS2?
    # TODO: Compare these with the ufs-weather-model regression test job card at:
    # https://github.com/ufs-community/ufs-weather-model/blob/develop/tests/fv3_conf/fv3_qsub.IN_wcoss2
    export FI_OFI_RXM_RX_SIZE=40000
    export FI_OFI_RXM_TX_SIZE=40000
    if [[ "${step}" = "fcst" ]] || [[ "${step}" = "efcs" ]]; then
        export OMP_PLACES=cores
        export OMP_STACKSIZE=2048M
        export MPICH_MPIIO_HINTS="*:romio_cb_write=disable"
        export FI_OFI_RXM_SAR_LIMIT=3145728
    fi

elif [[ "${step}" = "upp" ]]; then

    export NTHREADS_UPP=${NTHREADS1}
    export APRUN_UPP="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_UPP}"

elif [[ "${step}" = "atmos_products" ]]; then

    export USE_CFP="YES"  # Use MPMD for downstream product generation

elif [[ "${step}" = "oceanice_products" ]]; then

    export NTHREADS_OCNICEPOST=${NTHREADS1}
    export APRUN_OCNICEPOST="${launcher} -n 1 -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_OCNICEPOST}"

elif [[ "${step}" = "ecen" ]]; then

    export NTHREADS_ECEN=${NTHREADSmax}
    export APRUN_ECEN="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_ECEN}"

    export NTHREADS_CHGRES=${nth_chgres:-14}
    [[ ${NTHREADS_CHGRES} -gt ${npe_node_max} ]] && export NTHREADS_CHGRES=${npe_node_max}
    export APRUN_CHGRES="time"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${APRUN}"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${APRUN} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "esfc" ]]; then

    export NTHREADS_ESFC=${NTHREADSmax}
    export APRUN_ESFC="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_ESFC}"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${APRUN} -ppn ${npe_node_cycle} --cpu-bind depth --depth ${NTHREADS_CYCLE}"

elif [[ "${step}" = "epos" ]]; then

    export NTHREADS_EPOS=${NTHREADSmax}
    export APRUN_EPOS="${APRUN} -ppn ${npe_node} --cpu-bind depth --depth ${NTHREADS_EPOS}"

elif [[ "${step}" = "postsnd" ]]; then

    export MPICH_MPIIO_HINTS_DISPLAY=1
    export OMP_NUM_THREADS=1

    export NTHREADS_POSTSND=${NTHREADS1}
    export APRUN_POSTSND="${APRUN} --depth=${NTHREADS_POSTSND} --cpu-bind depth"

    export NTHREADS_POSTSNDCFP=${nth_postsndcfp:-1}
    [[ ${NTHREADS_POSTSNDCFP} -gt ${nth_max} ]] && export NTHREADS_POSTSNDCFP=${nth_max}
    export APRUN_POSTSNDCFP="${launcher} -np ${npe_postsndcfp} ${mpmd_opt}"

elif [[ "${step}" = "awips" ]]; then

    export NTHREADS_AWIPS=${NTHREADS2}
    export APRUN_AWIPSCFP="${launcher} -np ${npe} ${mpmd_opt}"

elif [[ "${step}" = "gempak" ]]; then

    export NTHREADS_GEMPAK=${NTHREADS1}
    export APRUN_GEMPAKCFP="${launcher} -np ${npe} ${mpmd_opt}"

elif [[ "${step}" = "fit2obs" ]]; then

    export NTHREADS_FIT2OBS=${NTHREADS1}
    export MPIRUN="${launcher} -np ${npe}"

elif [[ "${step}" = "waveawipsbulls" ]]; then

    unset PERL5LIB

elif [[ "${step:0:3}" = "mos" ]]; then

    export FORT_BUFFERED=TRUE

    if [[ "${step}" = "mos_stn_prep" ]]; then
       export OMP_PROC_BIND=true
    fi

fi
