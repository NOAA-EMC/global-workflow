#! /usr/bin/env bash

if [[ $# -ne 1 ]]; then

    echo "Must specify an input argument to set runtime environment variables!"
    exit 1

fi

step=$1

export launcher="srun -l --epilog=/apps/local/bin/report-mem --export=ALL"
export mpmd_opt="--multi-prog --output=mpmd.%j.%t.out"

# Configure MPI environment
export OMP_STACKSIZE=2048000
export NTHSTACK=1024000000

ulimit -s unlimited
ulimit -a

if [[ "${step}" = "prep" ]] || [[ "${step}" = "prepbufr" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export POE="NO"
    export BACK="NO"
    export sys_tp="JET"
    export launcher_PREP="srun"

elif [[ "${step}" = "prepsnowobs" ]]; then

    export APRUN_CALCFIMS="${launcher} -n 1"

elif [[ "${step}" = "prep_emissions" ]]; then

    export APRUN="${launcher} -n 1"

elif [[ "${step}" = "waveinit" ]] || [[ "${step}" = "waveprep" ]] || [[ "${step}" = "wavepostsbs" ]] || [[ "${step}" = "wavepostbndpnt" ]] || [[ "${step}" = "wavepostbndpntbll" ]] || [[ "${step}" = "wavepostpnt" ]]; then

    export CFP_MP="YES"
    if [[ "${step}" = "waveprep" ]]; then export MP_PULSE=0 ; fi
    export wavempexec=${launcher}
    export wave_mpmd=${mpmd_opt}

elif [[ "${step}" = "atmanlvar" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ATMANLVAR=${nth:-${nth_max}}
    [[ ${NTHREADS_ATMANLVAR} -gt ${nth_max} ]] && export NTHREADS_ATMANLVAR=${nth_max}
    export APRUN_ATMANLVAR="${launcher} -n ${npe}"

elif [[ "${step}" = "atmensanlletkf" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ATMENSANLLETKF=${nth:-${nth_max}}
    [[ ${NTHREADS_ATMENSANLLETKF} -gt ${nth_max} ]] && export NTHREADS_ATMENSANLLETKF=${nth_max}
    export APRUN_ATMENSANLLETKF="${launcher} ${npe}"

elif [[ "${step}" = "atmensanlfv3inc" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ATMENSANLFV3INC=${nth:-${nth_max}}
    [[ ${NTHREADS_ATMENSANLFV3INC} -gt ${nth_max} ]] && export NTHREADS_ATMENSANLFV3INC=${nth_max}
    export APRUN_ATMENSANLFV3INC="${launcher} ${npe}"

elif [[ "${step}" = "aeroanlrun" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_AEROANL=${nth:-${nth_max}}
    [[ ${NTHREADS_AEROANL} -gt ${nth_max} ]] && export NTHREADS_AEROANL=${nth_max}
    export APRUN_AEROANL="${launcher} -n ${npe}"

elif [[ "${step}" = "prepobsaero" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_PREPOBSAERO=${nth:-1}
    export APRUN_PREPOBSAERO="${launcher} -n ${npe} --cpus-per-task=${NTHREADS_PREPOBSAERO}"

elif [[ "${step}" = "snowanl" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_SNOWANL=${nth:-${nth_max}}
    [[ ${NTHREADS_SNOWANL} -gt ${nth_max} ]] && export NTHREADS_SNOWANL=${nth_max}
    export APRUN_SNOWANL="${launcher} -n ${npe}"

    export APRUN_APPLY_INCR="${launcher} -n 6"

elif [[ "${step}" = "atmanlfv3inc" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ATMANLFV3INC=${nth:-${nth_max}}
    [[ ${NTHREADS_ATMANLFV3INC} -gt ${nth_max} ]] && export NTHREADS_ATMANLFV3INC=${nth_max}
    export APRUN_ATMANLFV3INC="${launcher} -n ${npe}"

elif [[ "${step}" = "ocnanalbmat" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_OCNANAL=${nth:-${nth_max}}
    [[ ${NTHREADS_OCNANAL} -gt ${nth_max} ]] && export NTHREADS_OCNANAL=${nth_max}
    export APRUN_OCNANAL="${launcher} -n ${npe}"

elif [[ "${step}" = "ocnanalrun" ]]; then

    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_OCNANAL=${nth:-${nth_max}}
    [[ ${NTHREADS_OCNANAL} -gt ${nth_max} ]] && export NTHREADS_OCNANAL=${nth_max}
    export APRUN_OCNANAL="${launcher} -n ${npe}"

elif [[ "${step}" = "anal" ]] || [[ "${step}" = "analcalc" ]]; then

    export MKL_NUM_THREADS=4
    export MKL_CBWR=AUTO

    export CFP_MP=${CFP_MP:-"YES"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_GSI=${nth_anal:-${nth_max}}
    [[ ${NTHREADS_GSI} -gt ${nth_max} ]] && export NTHREADS_GSI=${nth_max}
    export APRUN_GSI="${launcher} -n ${npe_gsi:-${npe}}"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${launcher} \$ncmd"

    export NTHREADS_CYCLE=${nth_cycle:-12}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    npe_cycle=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${npe_cycle}"

    export NTHREADS_GAUSFCANL=1
    npe_gausfcanl=${npe_gausfcanl:-1}
    export APRUN_GAUSFCANL="${launcher} -n ${npe_gausfcanl}"

elif [[ "${step}" = "sfcanl" ]]; then
    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_CYCLE=${nth:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    npe_sfcanl=${ntiles:-6}
    export APRUN_CYCLE="${launcher} -n ${npe_sfcanl}"

elif [[ "${step}" = "eobs" ]]; then

    export MKL_NUM_THREADS=4
    export MKL_CBWR=AUTO

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_GSI=${nth:-${nth_max}}
    [[ ${NTHREADS_GSI} -gt ${nth_max} ]] && export NTHREADS_GSI=${nth_max}
    export APRUN_GSI="${launcher} -n ${npe_gsi:-${npe}}"

    export CFP_MP=${CFP_MP:-"YES"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "eupd" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ENKF=${nth:-${nth_max}}
    [[ ${NTHREADS_ENKF} -gt ${nth_max} ]] && export NTHREADS_ENKF=${nth_max}
    export APRUN_ENKF="${launcher} -n ${npe_enkf:-${npe}}"

    export CFP_MP=${CFP_MP:-"YES"}
    export USE_CFP=${USE_CFP:-"YES"}
    export APRUNCFP="${launcher} -n \$ncmd ${mpmd_opt}"

elif [[ "${step}" = "fcst" ]] || [[ "${step}" = "efcs" ]]; then

    ppn="npe_node_${RUN}"
    [[ -z "${!ppn+0}" ]] && ppn="npe_node"
    nprocs="npe_${RUN}"
    [[ -z ${!nprocs+0} ]] && nprocs="npe"

    (( nnodes = (${!nprocs}+${!ppn}-1)/${!ppn} ))
    (( ntasks = nnodes*${!ppn} ))
    # With ESMF threading, the model wants to use the full node
    export APRUN_UFS="${launcher} -n ${ntasks}"
    unset nprocs ppn nnodes ntasks

elif [[ "${step}" = "upp" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_UPP=${nth:-1}
    [[ ${NTHREADS_UPP} -gt ${nth_max} ]] && export NTHREADS_UPP=${nth_max}
    export APRUN_UPP="${launcher} -n ${npe}"

elif [[ "${step}" = "atmos_products" ]]; then

    export USE_CFP="YES"  # Use MPMD for downstream product generation

elif [[ "${step}" = "oceanice_products" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_OCNICEPOST=${nth:-1}
    export APRUN_OCNICEPOST="${launcher} -n 1 --cpus-per-task=${NTHREADS_OCNICEPOST}"

elif [[ "${step}" = "ecen" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ECEN=${nth:-${nth_max}}
    [[ ${NTHREADS_ECEN} -gt ${nth_max} ]] && export NTHREADS_ECEN=${nth_max}
    export APRUN_ECEN="${launcher} -n ${npe}"

    export NTHREADS_CHGRES=${nth_chgres:-12}
    [[ ${NTHREADS_CHGRES} -gt ${npe_node_max} ]] && export NTHREADS_CHGRES=${npe_node_max}
    export APRUN_CHGRES="time"

    export NTHREADS_CALCINC=${nth_calcinc:-1}
    [[ ${NTHREADS_CALCINC} -gt ${nth_max} ]] && export NTHREADS_CALCINC=${nth_max}
    export APRUN_CALCINC="${launcher} -n ${npe}"

elif [[ "${step}" = "esfc" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_ESFC=${nth:-${nth_max}}
    [[ ${NTHREADS_ESFC} -gt ${nth_max} ]] && export NTHREADS_ESFC=${nth_max}
    export APRUN_ESFC="${launcher} -n ${npe}"

    export NTHREADS_CYCLE=${nth_cycle:-14}
    [[ ${NTHREADS_CYCLE} -gt ${npe_node_max} ]] && export NTHREADS_CYCLE=${npe_node_max}
    export APRUN_CYCLE="${launcher} -n ${npe}"

elif [[ "${step}" = "epos" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_EPOS=${nth:-${nth_max}}
    [[ ${NTHREADS_EPOS} -gt ${nth_max} ]] && export NTHREADS_EPOS=${nth_max}
    export APRUN_EPOS="${launcher} -n ${npe}"

elif [[ "${step}" = "postsnd" ]]; then

    export CFP_MP="YES"

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_POSTSND=${nth:-1}
    [[ ${NTHREADS_POSTSND} -gt ${nth_max} ]] && export NTHREADS_POSTSND=${nth_max}
    export APRUN_POSTSND="${launcher} -n ${npe}"

    export NTHREADS_POSTSNDCFP=${nth_postsndcfp:-1}
    [[ ${NTHREADS_POSTSNDCFP} -gt ${nth_max} ]] && export NTHREADS_POSTSNDCFP=${nth_max}
    export APRUN_POSTSNDCFP="${launcher} -n ${npe_postsndcfp} ${mpmd_opt}"

elif [[ "${step}" = "awips" ]]; then

     echo "WARNING: ${step} is not enabled on ${machine}!"

elif [[ "${step}" = "gempak" ]]; then

     echo "WARNING: ${step} is not enabled on ${machine}!"

elif [[ "${step}" = "fit2obs" ]]; then

    nth_max=$((npe_node_max / npe_node))

    export NTHREADS_FIT2OBS=${nth:-1}
    [[ ${NTHREADS_FIT2OBS} -gt ${nth_max} ]] && export NTHREADS_FIT2OBS=${nth_max}
    export MPIRUN="${launcher} -n ${npe}"

fi
